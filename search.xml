<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2020/07/05/Clousim/"/>
      <url>/2020/07/05/Clousim/</url>
      
        <content type="html"><![CDATA[<p><a href="http://www.trojx.me/2019/12/30/cloudsim-plus-faq/" target="_blank" rel="noopener">云计算仿真工具CloudSim Plus常见问题总结</a><br><a href="https://veviz.github.io/2016/05/17/CloudSim/" target="_blank" rel="noopener">CloudSim Introduction</a><br><a href="https://blog.csdn.net/wjh1313677/article/details/45625999" target="_blank" rel="noopener">CloudSim源码分析-DatacenterBroker创建</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java 语言学习</title>
      <link href="/2020/06/30/Java/"/>
      <url>/2020/06/30/Java/</url>
      
        <content type="html"><![CDATA[<h3><span id="java-多线程">java 多线程</span></h3><h3><span id="设计模式">设计模式</span></h3><h4><span id="单例模式">单例模式</span></h4><h3><span id="数据库">数据库</span></h3><h3><span id="其他">其他</span></h3><p><a href="https://www.cnblogs.com/cosmos-wong/p/11845934.html" target="_blank" rel="noopener">java stack不推荐使用</a>,建议使用dequeue代替</p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>论文阅读</title>
      <link href="/2020/06/14/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/"/>
      <url>/2020/06/14/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/</url>
      
        <content type="html"><![CDATA[<h4><span id="大多是data-center-资源集中">大多是Data Center ,资源集中</span></h4><h4><span id="cooperative-game-based-virtual-machine-resource-allocation-algorithms-in-cloud-data-centershindawi">Cooperative Game-Based Virtual Machine Resource Allocation Algorithms in Cloud Data Centers(hindawi)</span></h4><ol><li>Cloud Data Center(CDC)资源利用率低</li><li>思路：对不同资源使用不同的基于 value 的博弈论解决方法;<ul><li>CPU: Shaply value(SV), payoff by number contribution</li><li>memory: weighted Shaply value(WSV),payoff by coliation ;and  members’s payoff about positive effort of coliation</li><li>storage: proportional Shaply value(PSV)</li><li>bandwith: weigthed-egalitarian Shaply value(WESV) payoff by member contribution and  heterogeneity between members</li></ul></li><li>不足：<ul><li>task 生成分为四类,每类的资源要求固定(task 不具有 变动性)</li><li>数据未公开</li><li>未解释 四类资源某些不足时的处理???</li></ul></li></ol><h4><span id="game-theoretic-resource-allocation-in-cloud-computing">Game theoretic resource allocation in cloud computing</span></h4><ol><li>介绍：同名书中的相干章节，基于Min-Max Game<ul><li>输入：request的信息，resource的信息</li><li>输出：分配矩阵</li></ul></li><li>思路：实现最大化资源的 utility(效用) 的目标；</li><li>utility 的公式构成(又分为单类资源utility和全局资源utility) ?? 不同资源,CPU<ul><li>budget</li><li>cost per sencod</li><li>request 量</li><li>request time 消耗时间</li><li>budget和time的factor因子</li></ul></li><li>算法：<ul><li>挑选出可以进行博弈的request</li><li>依次对每一种资源选择全局最大化utility时的分配，iteration</li></ul></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> cloud-computing resource allocation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>毕设实验</title>
      <link href="/2020/06/11/%E6%AF%95%E8%AE%BE/"/>
      <url>/2020/06/11/%E6%AF%95%E8%AE%BE/</url>
      
        <content type="html"><![CDATA[<p>##实验分类：</p><ol><li>小规模 系统搭建(请求链条不需要长)</li><li>大规模仿真模拟(可以模拟长请求链和大规模，大流量)</li></ol><p>###小规模系统构成：</p><ol><li>请求发送者(微服务的benchmark 附带流量)</li><li>微服务benchmark/请求处理<ul><li>服务链确定</li><li>流量监控(istio)</li></ul></li><li>决策中心(初次放置,调整): 博弈论均衡<ul><li>思路：<ul><li>分类</li><li>加权 集中</li></ul></li><li>放置：资源充足时, 参数 服务链(整体时延) &gt; 资源使用集中程度(避免资源过度集中于某些machine,也避免过度分散)</li><li>缩容：谨慎，按照kubeneats自带策略/长期监控流量,然后决策调整</li><li>扩容：存在多服务链扩容,博弈论<ul><li>资源不冲突，分配</li><li>资源冲突，考虑优先级, 其他参数 资源利用率,资源集中程度<br>###大规模仿真模拟</li></ul></li></ul></li><li>工具：CloudSim(docker)</li><li>微服务的指标细化(QOS,基本资源需求,基本处理能力)</li><li>流量构造(常规多样流量；突发大规模流量)</li></ol><p>###目标：</p><ol><li>满足已存在的QOS 要求(根据流量调整实例的部署，扩缩容)</li><li>资源利用率</li><li>性能表现(latency,稳定性)</li></ol><p>###问题：</p><ol><li>利用博弈论简化问题，<ul><li>只考虑了部署实例的问题，没有考虑具体资源的供给(如何量化的问题),</li><li>暂时没有考虑后续的伸缩</li><li>未考虑 资源不集中</li></ul></li><li>平衡不是目标，平衡是为了降低干扰，我的目标是提高QOS，稳定性，提高资源利用率，降低资源占有率</li><li>长请求链的实际存在依据(实际运行中的每个环节都是请求链的一环)：更多例子</li><li>微服务benchmark的自带流量测试比较简单/不够复杂和波动，需要重新构造设计</li></ol><p>已完成：</p><ol><li>benchmark:<br>1.1 已部署 <a href="https://github.com/microservices-demo/microservices-demo" target="_blank" rel="noopener">Sock-Shop</a> <a href="https://github.com/GoogleCloudPlatform/microservices-demo" target="_blank" rel="noopener">Hipster</a> <a href="https://github.com/FudanSELab/train-ticket/wiki" target="_blank" rel="noopener">Train-Ticket</a> <a href="https://github.com/delimitrou/DeathStarBench" target="_blank" rel="noopener">DeahStarBench</a></li></ol><p>1.2 待部署 <a href="https://github.com/dream-lab/riot-bench" target="_blank" rel="noopener">Riot</a></p><ol start="2"><li>决策中心<br>2.1 熟悉了解 <a href="https://www.coursera.org/learn/game-theory-1/" target="_blank" rel="noopener">博弈论理论</a><br>2.2 算法实现，需要想清楚问题</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Kuberneats </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>源码阅读</title>
      <link href="/2020/04/14/%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
      <url>/2020/04/14/%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/</url>
      
        <content type="html"><![CDATA[<p>docker</p><ul><li><a href="https://mp.weixin.qq.com/s/zyDGaT6SGFUVU60r9L7S3Q?" target="_blank" rel="noopener">参考博客1</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>云计算模拟</title>
      <link href="/2020/03/31/%E4%BA%91%E8%AE%A1%E7%AE%97%E6%A8%A1%E6%8B%9F/"/>
      <url>/2020/03/31/%E4%BA%91%E8%AE%A1%E7%AE%97%E6%A8%A1%E6%8B%9F/</url>
      
        <content type="html"><![CDATA[<p>毕业设计需要对于大型云计算环境进行模拟，经过调研，决定使用<a href="http://www.cloudbus.org/cloudsim/" target="_blank" rel="noopener">CloudSim</a> <a href="https://github.com/Cloudslab/cloudsim" target="_blank" rel="noopener">Github</a></p><p>CloudSim是在离散事件模拟包SimJava上开发的函数库,可以直接当做Java工程使用，即导入IDEA<br><a href="https://www.cnblogs.com/sddai/p/6036893.html" target="_blank" rel="noopener">国内比较全的关于CloudSim的介绍</a><br><a href="https://www.cnblogs.com/xxfna/articles/9563068.html" target="_blank" rel="noopener">如何将CloudSim导入IDEA</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> CloudSim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux</title>
      <link href="/2020/01/13/linux/"/>
      <url>/2020/01/13/linux/</url>
      
        <content type="html"><![CDATA[<p>本问用于记录linux常用的命令</p><p>ssh</p><p>scp</p><blockquote><p>在两个服务器之间传输文件<br>rz<br>传输本地文件到服务器<br>sz [filename]<br>传输服务器文件到本地</p></blockquote><p>find [PATH] [option]</p><blockquote><p>在指定目录下查找相关文件<br>example : find . -name “name”</p></blockquote><p>tail [file] [option]</p><blockquote><p>从后开始查询文件，默认查询最后十行<br>tail -n 100 nohup.log</p></blockquote><p>cat/touch<br>netstat<br>telnet<br>chown/chmod/chgrp<br>useradd</p>]]></content>
      
      
      
        <tags>
            
            <tag> linux command </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell</title>
      <link href="/2020/01/12/shell/"/>
      <url>/2020/01/12/shell/</url>
      
        <content type="html"><![CDATA[<p>shell 是UNIX系统的用户与操作系统之间的一种接口;</p><p><a href="https://blog.csdn.net/Jiaach/article/details/83788984" target="_blank" rel="noopener">注意事项</a><br>在 单引号 以及 反单引号 里使用 ${AVAILABLE}引用变量</p><p>PATH 变量 谨慎使用</p>]]></content>
      
      
      
        <tags>
            
            <tag> shell script </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>frp</title>
      <link href="/2020/01/12/frp/"/>
      <url>/2020/01/12/frp/</url>
      
        <content type="html"><![CDATA[<p>云服务器　<a href="https://promotion.aliyun.com/ntms/act/campus2018.html" target="_blank" rel="noopener">阿里云ECS</a><br>关于端口限制(connect timeout) <a href="https://blog.csdn.net/cao0507/article/details/82758288" target="_blank" rel="noopener">https://blog.csdn.net/cao0507/article/details/82758288</a></p><p>crontab</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">PROCESS_NUM=`ps -ef | grep &quot;frpc -c &quot; | grep -v &quot;grep&quot; | wc -l`</span><br><span class="line">FRP_PATH=&apos;/home/sun/fpr/frp_0.31.1_linux_amd64&apos;</span><br><span class="line">if [ $PROCESS_NUM -lt 1 ];</span><br><span class="line">then</span><br><span class="line">    `nohup $&#123;FRP_PATH&#125;/frpc -c $&#123;FRP_PATH&#125;/frpc.ini &gt; $&#123;FRP_PATH&#125;/nohup.out 2&gt;&amp;1 &amp;`</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/womenrendeme/article/details/89053746" target="_blank" rel="noopener">多客户端</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> frp shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker</title>
      <link href="/2020/01/09/docker/"/>
      <url>/2020/01/09/docker/</url>
      
        <content type="html"><![CDATA[<p>##Install<br><a href="https://docs.docker.com/install/linux/linux-postinstall/" target="_blank" rel="noopener">官方教程</a></p><p>##Usage<br>docker</p><blockquote><p>docker ps -a<br>docker images<br>dokcer stop/restart/rm CONTAINER_ID<br>docker rmi IAMGE_ID<br>docker logs CONTAINER_ID --tail NUMBER<br>docker inspect</p></blockquote><p>dokcer java 应用启动慢　尝试解决</p><blockquote><p>1.非阻塞熵池策略 优化　<a href="http://hongjiang.info/tomcat-startup-slowly-in-docker/" target="_blank" rel="noopener">Docker中apache-tomcat启动慢的问题</a>　<a href="https://www.cnblogs.com/a1304908180/p/10745284.html" target="_blank" rel="noopener">为什么阿里云服务器的docker启动tomcat这么慢？</a> -Djava.security.egd=file:/dev/urandom　－＞　-Djava.security.egd=file:/dev/./urandom<br>2.JVM 容量优化，即增加参数值 -Xms256m -Xmx512m -XX:PermSize=64m -XX:MaxPermSize=128m</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> docker install use </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kubernets</title>
      <link href="/2020/01/09/kubernets/"/>
      <url>/2020/01/09/kubernets/</url>
      
        <content type="html"><![CDATA[<h2><span id="install">Install</span></h2><p>我安装的是 minikube <a href="https://kubernetes.io/docs/tasks/tools/install-kubectl/#install-kubectl-on-linux" target="_blank" rel="noopener">K8S官方教程</a><br>注意点:</p><ul><li><p>网络问题：</p><ul><li><a href="https://coding.imooc.com/learn/questiondetail/81560.html" target="_blank" rel="noopener">更改镜像源</a></li><li>更改 k8s image 源<blockquote><p>kubeadm init --image-repository <a href="http://registry.aliyuncs.com/google_containers" target="_blank" rel="noopener">registry.aliyuncs.com/google_containers</a><br>kubeadm init --image-repository <a href="http://index.docker.io/mirrorgooglecontainers" target="_blank" rel="noopener">index.docker.io/mirrorgooglecontainers</a></p></blockquote></li></ul></li><li><p>启动选项:</p><ul><li>选择 vm drive(in local linux environment use local docker)</li></ul><blockquote><p>minikube start --vm-driver=none</p></blockquote><ul><li>更改 kubeadm 配置</li></ul><blockquote><p>导出　kubeadm 原本配置　old.yaml，然后更改为 new.yaml<br>kubeadm config migrate --old-config old.yaml --new-config new.yaml</p></blockquote></li><li><p>最终:</p></li></ul><blockquote><p>minikube start --vm-driver=none --image-repository=<a href="http://registry.aliyuncs.com/google_containers" target="_blank" rel="noopener">registry.aliyuncs.com/google_containers</a></p></blockquote><h2><span id="kubernetsminikube-相关操作">Kubernets/minikube 相关操作</span></h2><p><a href="http://docs.kubernetes.org.cn/664.html" target="_blank" rel="noopener">k8s中文文档</a><br>minikube</p><blockquote><p>minikube stop/delete</p></blockquote><p>port</p><blockquote><p>containerPort,targetPort,nodePort,port 之间的区别<br>在deployment 文件中　containerPort相当于映射到容器外的端口 == docker run IMAGE_ID -P OUTSIDE_PORT:INSIDE_PORT<br>docker exec -it  --privileged   ab56f4a5d15c  /bin/sh  携带权限进入 docker，避免进入docker内需要某些权限的操作</p></blockquote><p>kubectl</p><blockquote><p>kubectl describe pod/orders-5dbffdd8ff-zqp2c --namespace=‘sock-shop’<br>kubectl get pods --namespace=‘sock-shop’<br>kubectl edit deploy/shipping  --namespace=‘sock-shop’</p></blockquote><h2><span id="相关概念">相关概念</span></h2><ol><li>pod vs container</li><li>containerPort vs targetPort vs nodePort vs port</li><li>service</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> k8s install </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>microservice 部署</title>
      <link href="/2020/01/08/microservice/"/>
      <url>/2020/01/08/microservice/</url>
      
        <content type="html"><![CDATA[<h2><span id="部署-microservice-benchmark">部署　microservice benchmark</span></h2><p><a href="https://github.com/microservices-demo/microservices-demo" target="_blank" rel="noopener">官方教程</a></p><h2><span id="问题">问题</span></h2><ol><li><p>yml部署文件　unable to recognize</p><ul><li>错误：</li></ul><blockquote><p>unable to recognize “deploy/kubernetes/manifests-logging/elasticsearch.yml”: no matches for kind “Deployment” in version “extensions/v1beta1”, unable to recognize “deploy/kubernetes/manifests-logging/fluentd-daemon.yml”: no matches for kind “DaemonSet” in version “extensions/v1beta1”, unable to recognize “deploy/kubernetes/manifests-logging/kibana.yml”: no matches for kind “Deployment” in version “extensions/v1beta1”</p></blockquote><ul><li>解决　<a href="https://github.com/microservices-demo/microservices-demo/issues/802" target="_blank" rel="noopener">benchmark github issue</a></li></ul></li><li><p>部署pod无法正常运行</p><ul><li>部署错误，原本服务应当暴漏出的接口无法访问</li></ul><blockquote><p>发现是因为 一些pod在部署之后，发现频繁重启,就是因为这些暴露出的接口无法访问，它们是作为监测是否健康的接口存在，认为容器启动错误，因而POD重启container<br>NAME                            READY   STATUS        RESTARTS   AGE<br>carts-fc985d95-h78dn            0/1     Running       22         12h<br>经过各种排查，无法发现原因，最终一次偶然发现行得通了，尝试通过更改配置重现这次情况，最后发现，是因为容器启动太慢，导致监测的delay相对太小，因而监测失败<br>而重复监测失败，重复重启，又有多个pod(contianer)重启，导致CPU占有率高，从而启动速度可能更受影响</p></blockquote><ul><li>尝试排查错误<br>　       1. 观察日志无法发现错误<br>　       2. 经过观察，基本都是80端口的问题</li><li>尝试<br>　       1. 是否因为port范围限制?尝试在/etc/kubernets/manifests/api-servers.yaml中更改，无效<br>　       2. 尝试更改　pod 的yaml 中的port ，并重新apply,确定是否是端口限制的原因</li><li>解决方法：</li></ul><blockquote><p>本质是因为docker启动慢，而此时　pod 的检测已经开始了，从而判断docker未正常启动，从而重启docker,从而陷入循环，所以有两种方法<br>1.加快docker的启动速度，详见<a href="https://walkdeadtobe.github.io/2020/01/09/docker/" target="_blank" rel="noopener">dokcer java 应用启动慢</a><br>2.延后pod的检测，等docker正常启动，可以增加 initialDelaySeconds,failureThreshold,periodSeconds,successThreshold等参数的值</p></blockquote></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> microservice deployment </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Coding</title>
      <link href="/2019/12/30/%E9%87%8D%E6%9E%84/"/>
      <url>/2019/12/30/%E9%87%8D%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<p>最近在重构之前用java写的SSO的代码，有点感触<br>1.对自己写的屎一样的代码，尽量重构，起码让自己以后重新看时，还敢承认这是自己的代码<br>2.写代码时，要注意自己的最初目的，不要让函数超出了它本身应该做的事情<br>3.尽量不要涉及硬编码的部分，如果大量重复的硬编码，那么该思考是不是必要的，也许它应该是数据库的信息？</p>]]></content>
      
      
      
        <tags>
            
            <tag> reconstruct </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>deployment</title>
      <link href="/2019/12/22/%E9%83%A8%E7%BD%B2/"/>
      <url>/2019/12/22/%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<blockquote><h1><span id="1-nginx">1 nginx</span></h1></blockquote><blockquote><blockquote><h2><span id="11-dockerfile">1.1 dockerfile</span></h2></blockquote></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#Dockerfile</span><br><span class="line">FROM nginx:latest</span><br><span class="line">MAINTAINER chengr chengr@buaa.edu.cn</span><br><span class="line">#mkdir</span><br><span class="line">RUN mkdir -p /home/cast/web/kexie_BigScreen_vue/dist \</span><br><span class="line"> &amp;&amp; mkdir -p /home/cast/web/act-kexie-big \</span><br><span class="line"> &amp;&amp; mkdir -p /home/cast/web/vue_front_of_talent/vue-demo \</span><br><span class="line"> &amp;&amp; mkdir -p /home/cast/web/talent_zhejiang/vue-demo \</span><br><span class="line"> &amp;&amp; mkdir -p /home/cast/web/kexie_news/dist \</span><br><span class="line"> &amp;&amp; mkdir -p /home/cast/web/activeDay0904 \</span><br><span class="line"> &amp;&amp; mkdir -p /home/cast/web/kexie_Local_BigScreen_vue/dist \</span><br><span class="line"> &amp;&amp; mkdir -p /home/cast/web/kexie_Local_BigScreen_GuangXi/dist \</span><br><span class="line"> &amp;&amp; mkdir -p /home/cast/web/kexie_BigsScreen_city/dist</span><br><span class="line"></span><br><span class="line">#WORKDIR /home/LAB/bdbc.kg</span><br><span class="line">#copy file</span><br><span class="line">COPY nginx.conf /etc/nginx/</span><br><span class="line">COPY default /etc/nginx/conf.d/default.conf</span><br><span class="line">#COPY Frontend/talent/vue-demo /home/cast/web/vue_front_of_talent/vue-demo</span><br><span class="line">#COPY /home/LAB/bdbc.kg/Frontend/kexie/dist /home/cast/web/kexie_BigScreen_vue/dist</span><br><span class="line"></span><br><span class="line">EXPOSE 80 8003 8010 9010  8888 8889  8890  8891</span><br></pre></td></tr></table></figure><blockquote><blockquote><h2><span id="12-build-images">1.2 build images</span></h2></blockquote></blockquote><p>docker build -t nginx_bh .</p><blockquote><blockquote><h2><span id="13-create-container">1.3 create container</span></h2></blockquote></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line">--name beihang_nginx \</span><br><span class="line">-p 80:80 \</span><br><span class="line">-p 8010:8010 \</span><br><span class="line">-p 9010:9010 \</span><br><span class="line">-p 8888:8888 \</span><br><span class="line">-p 8889:8889 \</span><br><span class="line">-p 8890:8890 \</span><br><span class="line">-p 8891:8891 \</span><br><span class="line">-p 8003:8003 \</span><br><span class="line">-v /home/LAB/bdbc.kg/Frontend/talent/vue-demo:/home/cast/web/vue_front_of_talent/vue-demo \</span><br><span class="line">-v /home/LAB/bdbc.kg/Frontend/kexie_BigScreen_vue/dist:/home/cast/web/kexie_BigScreen_vue/dist \</span><br><span class="line">-v /home/LAB/bdbc.kg/Frontend/talent_zhejiang/vue-demo:/home/cast/web/talent_zhejiang/vue-demo \</span><br><span class="line">-d nginx_bh</span><br></pre></td></tr></table></figure><blockquote><p>其他需要注意或者修改的地方</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python ~/replace.py</span><br></pre></td></tr></table></figure><p>替换前端页面/nginx配置文件(网关地址,单点登录服务地址)</p><blockquote><p>增加新后端时，需要注意的地方</p></blockquote><ul><li>1.后端以及网关处关于验证的部分是否需要更改（待改进）<ul><li>1.1 后端管理授权部分代码</li><li>1.2 网关与SSO 交互部分</li></ul></li><li>2.是否可能因为时延部分，导致网关与后端验证失败</li></ul><blockquote><h1><span id="2-kong">2 kong</span></h1></blockquote><blockquote><blockquote><h2><span id="21-dockerfile">2.1 dockerfile</span></h2></blockquote></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#Dockerfile</span><br><span class="line">FROM gecwf5gs.mirror.aliyuncs.com/library/kong:1.4</span><br><span class="line">WORKDIR /usr/src/app</span><br><span class="line">ADD my_kong_plugin my_kong_plugin</span><br><span class="line">WORKDIR /usr/src/app/my_kong_plugin</span><br><span class="line">RUN luarocks make &amp;&amp; luarocks pack kong-plugin-myplugin &amp;&amp; luarocks install kong-plugin-myplugin-0.1.0-1.all.rock &amp;&amp; cp ./conf/kong.conf /etc/kong/</span><br><span class="line">ENTRYPOINT [&quot;/docker-entrypoint.sh&quot;]</span><br><span class="line">EXPOSE 8000 8443 8001 8444</span><br><span class="line">STOPSIGNAL SIGQUIT</span><br><span class="line">CMD [&quot;kong&quot;, &quot;docker-start&quot;]</span><br></pre></td></tr></table></figure><blockquote><blockquote><h2><span id="22-build-image">2.2 build image</span></h2></blockquote></blockquote><p>docker build -t  gateway .</p><blockquote><blockquote><h2><span id="23-create-container">2.3 create container</span></h2></blockquote></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name gateway \</span><br><span class="line">--network=kong-net \</span><br><span class="line">-e &quot;KONG_DATABASE=postgres&quot; \</span><br><span class="line">-e &quot;KONG_PG_</span><br><span class="line">hunHOST=kong-database&quot; \</span><br><span class="line">-e &quot;KONG_CASSANDRA_CONTACT_POINTS=kong-database&quot; \</span><br><span class="line">-e &quot;KONG_PLUGINS= bundled,kong-plugin-myplugin&quot;   \</span><br><span class="line">-e &quot;KONG_ADMIN_LISTEN=0.0.0.0:8001, 0.0.0.0:8444 ssl&quot; \</span><br><span class="line">-p 8000:8000 \</span><br><span class="line">-p 8443:8443 \</span><br><span class="line">-p 8001:8001 \</span><br><span class="line">-p 8444:8444 \</span><br><span class="line">-e &quot;KONG_PROXY_ACCESS_LOG=/dev/stdout&quot; \</span><br><span class="line">-e &quot;KONG_ADMIN_ACCESS_LOG=/dev/stdout&quot; \</span><br><span class="line">-e &quot;KONG_PROXY_ERROR_LOG=/dev/stderr&quot; \</span><br><span class="line">-e &quot;KONG_ADMIN_ERROR_LOG=/dev/stderr&quot; \</span><br><span class="line">gateway</span><br></pre></td></tr></table></figure><blockquote><p>额外需要修改 或者注意的地方</p></blockquote><p>conf/kong.conf 或者 /etc/kong/kong.conf</p><p>1.配置因为API请求中包含很大数据量,不配置会导致数据传输不完全(相应需要配合修改docker nginx 中相关内容)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line">nginx_proxy_large_client_header_buffers = 8 64k  </span><br><span class="line">nginx_proxy_proxy_buffer_size = 40m  </span><br><span class="line">nginx_proxy_proxy_buffers = 4 40m  </span><br><span class="line">ngin_proxy_proxy_read_timeout = 600  </span><br><span class="line">nginx_proxy_proxy_send_timeout = 600</span><br></pre></td></tr></table></figure><p>2.定义log格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx_http_log_format=notice escape=json &apos;&#123; &quot;@timestamp&quot;: &quot;$time_iso8601&quot;, &apos; &apos;&quot;remote_addr&quot;: &quot;$remote_addr&quot;, &apos; &apos;&quot;referer&quot;: &quot;$http_referer&quot;, &apos; &apos;&quot;request&quot;: &quot;$request&quot;, &apos; &apos;&quot;status&quot;: $status, &apos; &apos;&quot;bytes&quot;:$body_bytes_sent, &apos; &apos;&quot;agent&quot;: &quot;$http_user_agent&quot;, &apos; &apos;&quot;user&quot;: &quot;$http_username&quot;, &apos; &apos;&quot;x_forwarded&quot;: &quot;$http_x_forwarded_for&quot;, &apos; &apos;&quot;upstr_addr&quot;: &quot;$upstream_addr&quot;,&apos; &apos;&quot;upstr_host&quot;: &quot;$upstream_http_host&quot;,&apos; &apos;&quot;ups_resp_time&quot;: &quot;$upstream_response_time&quot; &#125;&apos;</span><br></pre></td></tr></table></figure><p>3.更改access/error日志格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">proxy_access_log =  /dev/stdout  notice  </span><br><span class="line">admin_access_log =  /dev/stdout  notice  </span><br><span class="line">proxy_error_log  =  /dev/stderr  </span><br><span class="line">admin_error_log =  /dev/stderr</span><br></pre></td></tr></table></figure><p>4.修改kong插件代码 myplugin/access.lua</p><blockquote><p>210.14.118.96/210.14.118.95/smart.cast.org.cn-&gt;10.1.1.1<br>111.203.146.69/sso-smart.cast.org.cn:8080 -&gt;10.1.1.2:8080</p></blockquote><p>5.代码中使用时间作为加密因素之一，注意与后端服务时区保持一致，否则可能导致后端验证失败,401</p><blockquote><p>初步解决方案为　多个服务器　都　使用时间戳都转化为北京时间</p></blockquote><p>6.开启 myplugin key-auth<br>7.psql -U kong  -W</p>]]></content>
      
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bug记录和解决</title>
      <link href="/2019/12/20/bug%E8%AE%B0%E5%BD%95%E5%92%8C%E8%A7%A3%E5%86%B3/"/>
      <url>/2019/12/20/bug%E8%AE%B0%E5%BD%95%E5%92%8C%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<ol><li></li></ol><blockquote><p>问题描述：人才库后端检测token失效后,返回要求跳转<br>bug描述：由于返回跳转地址与Host不同,涉及跨域问题<br>尝试1：解决问题位置,排除了问题出在授权服务器所在,确定由于浏览器拦截跨域请求<br>尝试2：尝试将跨域请求伪装成同域的请求,在经同域的nginx拦截,使用rewrite规则或者return 301 重定向；错误,由于ajax请求,是局部数据请求,本身就是为了避免全局刷新的问题,所以ajax请求会自动紧接着执行重定向请求,最终仍然跨域<br>尝试3：尝试获取后端返回的重定向请求中的Location header,然后可以在ajax的complete函数中实现判断301/302状态,跳转到Location所在地址,错误：同尝试2的错误,ajax请求会紧接着执行重定向请求,因而会导致最终执行到complete函数时,已经没有 Location 头,（此外也可能是因为跨域请求只允许暴露部分header,你也可以选择在Access-Control-Expose-Headers 中添加 你所需要暴露进而获取的header）<br>尝试4：从后端入手,当token过期或者无token时,构造状态码为401（Unauthorized）的请求,并添加Header Location的值为所要跳转的地址,同时将Location 添加到 Access-Control-Expose-Headers中,最后在前端的ajax 请求 complete函数中,设置对于 401请求的跳转处理</p></blockquote><ol start="2"><li></li></ol><blockquote><p>问题描述：spring oauth code 模式,以code请求token ,无法获得token,报 500 错误<br>排查:查看当时日志,发现是数据库查询出现问题,但没有指明查询的数据表；因而 开启MySQL数据库的日志功能,记录查询操作,从而定位数据表</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set global general_log=on; #开启日志</span><br><span class="line">show variables like &apos;%general_log%&apos;; #获得日志文件位置,tail命令查询最新日志</span><br></pre></td></tr></table></figure><blockquote><p>前因后果：由于每次服务重启,都要执行数据库脚本(即先drop 然后 create,之后写入)；考虑到许多账户信息无需重复写入,所以更改脚本如果存在就无需drop,否则才create;同时这也引发问题,即对于oauth 模式不仅有账户信息,还有其他认证信息比如说本问题中涉及的 oauth_access_token,重新启动时应当清除其中的一些认证信息,最简单的方式就是清除重建其中的table(除身份信息)<br>解决：短暂解决，直接删除重复的行即可，之后会重新更改数据库脚本</p></blockquote><ol start="3"><li></li></ol><blockquote><p>问题描述：在vue下使用外部图片链接作为 img的src 源,出现403forbidden<br>排查：起初通过chrome-&gt;developer tools-&gt;network  发现在访问原链接之后会发生一次302 重定向,在第二次请求的时候发生403 forbidden,猜测是否是因为重定向的原因导致403发生(认为由于浏览器或者js没有处理重定向)，后来尝试更改改为重定向之后链接发现,仍然有403 错误，最终发现可能是由于外部图片提供对于盗链的处理导致的<br>原因：图片提供的服务器根据 Request Header 的 Referer 来源字段判断图片是否盗链,所以可以通过隐藏这一字段来实现获取图片</p></blockquote><blockquote><p>解决：在html head 标签下添加</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;/&gt;</span><br></pre></td></tr></table></figure><blockquote><p>此外，由于是在vue项目下进行全局配置，以后是否会引发其他问题，是需要考虑的;后来发现 通过 vue-meta 插件可以<a href="https://blog.csdn.net/zc_ad/article/details/87776163" target="_blank" rel="noopener">配置单个页面的 head</a></p></blockquote><ol start="4"><li></li></ol><blockquote><p>问题描述：在替换SSO服务打包之后的jar包之后，访问人才库，发现每隔一会,SSO分发的token就会失效<br>经过反复排查不是jar包损坏，后来经过开启mysql数据库日志：当建立数据库连接1分钟或者6秒之后，连接就会自动(?)断开,而在spring对于数据库的连接配置 autoConnect=true 以及 初始化脚本有对于数据库中部分表内容的全部删除,所以之后会重新建立连接，同时删除之前存储在数据库里面的token，导致最终每过一分钟就会使得token失效</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">2019-07-31T15:47:07.471818Z   82 Connectroot@localhost on oauth using TCP/IP</span><br><span class="line">2019-07-31T15:47:07.472235Z   82 Query/* mysql-connector-java-5.1.46 ( Revision: 9cc87a48e75c2d2e87c1a293b2862ce651cb256e ) */SELECT  @@session.auto_increment_increment AS auto_increment_increment, @@character_set_client AS character_set_client, @@character_set_connection AS character_set_connection, @@character_set_results AS character_set_results, @@character_set_server AS character_set_server, @@collation_server AS collation_server, @@init_connect AS init_connect, @@interactive_timeout AS interactive_timeout, @@license AS license, @@lower_case_table_names AS lower_case_table_names, @@max_allowed_packet AS max_allowed_packet, @@net_buffer_length AS net_buffer_length, @@net_write_timeout AS net_write_timeout, @@query_cache_size AS query_cache_size, @@query_cache_type AS query_cache_type, @@sql_mode AS sql_mode, @@system_time_zone AS system_time_zone, @@time_zone AS time_zone, @@transaction_isolation AS transaction_isolation, @@wait_timeout AS wait_timeout</span><br><span class="line">2019-07-31T15:47:07.472785Z   82 QuerySET character_set_results = NULL</span><br><span class="line">2019-07-31T15:47:07.473024Z   82 QuerySET autocommit=1</span><br><span class="line">2019-07-31T15:47:07.473220Z   82 Queryselect @@session.transaction_read_only</span><br><span class="line">2019-07-31T15:47:13.644983Z   73 Quit</span><br><span class="line">2019-07-31T15:47:13.648349Z   74 Quit</span><br><span class="line">2019-07-31T15:47:13.648871Z   75 Quit</span><br><span class="line">2019-07-31T15:47:13.649378Z   76 Quit</span><br><span class="line">2019-07-31T15:47:13.650263Z   77 Quit</span><br><span class="line">2019-07-31T15:47:13.650841Z   78 Quit</span><br><span class="line">2019-07-31T15:47:13.651369Z   79 Quit</span><br><span class="line">2019-07-31T15:47:13.651845Z   80 Quit</span><br><span class="line">2019-07-31T15:47:13.652346Z   81 Quit</span><br><span class="line">2019-07-31T15:47:13.652853Z   82 Quit</span><br></pre></td></tr></table></figure><blockquote><p>解决尝试：a) 可能是代码的原因，在对代码进行检查以及和git版本进行核对之后发现，代码并没有更改，排除之  b) maven 依赖的问题，猜测可能是由于maven依赖更新的原因，导致的不兼容，首先怀疑的是对于mysql的java 驱动 java-mysql-connector ,尝试过旧版本后发现版本不兼容，编译报错 ，最终把以前的jar解压后一一比对其中的依赖包文件版本是否相同，但是发现所有的依赖文件版本相同，当然也可能是由于maven其他我不知道的原因导致的，但是暂时排除之  c) 可能是由于mysql数据库本身配置的原因，比如说mysql配置中的 connect_timeout，net_read_timeout,net_write_timeout等参数，但是更改这些参数之后并没有起作用  d) 最终一次意外的尝试发现，当数据库停止运行一段时间后，再次运行之前有问题的jar包，发现不会出现重新连接的情况，猜测可能是数据库连接池没有释放或者类似的原因，导致再连数据库会出现问题 e)回来经过仔细审查发现，是由于crontab脚本出现的错误，导致最终每分钟会尝试执行数据库连接(脚本本身有错误以及脚本监控时候的设计有问题)，着可能导致SSO服务出现数据库连接闪断;<br>解决：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1.</span><br><span class="line">service mysqld stop    #关闭mysql数据库</span><br><span class="line">service crond stop     #关闭crontab服务</span><br><span class="line">杀死SSO的进程</span><br><span class="line">echo 3 &gt; /proc/sys/vm/drop_caches  #释放相关缓存</span><br><span class="line">2.等待5分钟左右</span><br><span class="line">3.</span><br><span class="line">service crond start    #重启 crontab 服务,执行相关定时任务</span><br><span class="line">service mysqld stop    #重启 mysql  服务</span><br></pre></td></tr></table></figure><ol start="5"><li></li></ol><blockquote><p>问题描述：在使用git pull  origin master 报错</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">remote: Repository not found. </span><br><span class="line">fatal: repository &apos;https://github.com/*/*.git/&apos; not found</span><br></pre></td></tr></table></figure><blockquote><p>经过查询<a href="https://www.jianshu.com/p/5eb3a91458de" target="_blank" rel="noopener">相关博客</a>,发现是由于之前使用git clone 要求输入用户名与密码，而输入了另一个账户的密码，windows把密码记住了，下次直接使用(这涉及git credential)<br>在当前目录下查看  git config --list 可以看到配置 credential.helper=manager<br>解决方法<br>1: 在windows 用户凭据管理中更改涉及该仓库的用户名和密码(个人使用有效)<br>2: git credential-manager uninstall   git credential-manager install 再输入密码 <a href="https://www.cnblogs.com/zqyw/p/10988018.html" target="_blank" rel="noopener">来源博客</a> (未经测试)</p></blockquote><ol start="6"><li></li></ol><blockquote><p>问题描述：由postman 发出请求,经过 Kong 网关 向 ES 发出请求时,ES报 error “headers name contain non-ascii”<br>进一步排除,一共包含3个部分，postman-&gt;Kong-&gt;ES<br>1.postman发出的请求header有问题<br>2.Kong网关在处理的过程中出现问题<br>3.ES出现问题<br>经过排查日志，发现请求顺畅，到达ES处，但是ES处返回error，因而使中间某个环节出现问题<br>直接向ES发出相关简单请求发现,没有错误，首先暂不考虑3<br>检查了postman的所有header,认为没有错误,那么很可能问题出现在Kong网关部分<br>因此问题很可能出在自定义的网关插件处，经过排查日志,也没有发现那里有错误,为了进一步确定是否是因为这个插件，直接禁止这个插件，发现正常了，起码不报error “headers name contain non-ascii”,那么就确定的确是插件中的某些逻辑出现问题，导致错误，进一步排查插件的问题<br>因为是header相关的问题，因而使用笨方法，尝试挨个注释每个命令，然后刊注释哪个之后正常即该code出问题（或者注释所有相关代码，然后解注释，看哪个有问题？），最终确定产生问题的代码</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx.set_header(&apos;encrypt2&apos;)=encrypt</span><br></pre></td></tr></table></figure><blockquote><p>由代码可知，header name 应该不会出现非ASCII值，而encrypt变量是加密产生的，其包含非ascii值，所以进一步<br>1.header name 包含非ascii值：在nginx/kong处给header 赋值时，由于非ascii导致溢出（？）或者（该想法未验证）encrypt超过普通header能容纳的长度，溢出<br>2.header name 不包含asciiz值：ES在判断的时候,对header 内容 和 header name中包含非ascii值，都报同一个error</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Learn Markdown</title>
      <link href="/2019/11/15/markdown/"/>
      <url>/2019/11/15/markdown/</url>
      
        <content type="html"><![CDATA[<blockquote><p>代码引用</p></blockquote><p>`print(‘hello world!’)`<br><code>print('hello world!')</code></p><p>&lt;!–￼0–&gt;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(&apos;hello world!&apos;)  </span><br><span class="line">printf(&quot;helloworld\n&quot;);  </span><br><span class="line">cout &lt;&lt; &quot;helloworld\n&quot;;  </span><br><span class="line">print(&quot;helloworld&quot;)  </span><br><span class="line">console.log(&quot;helloworld&quot;);  </span><br><span class="line">fmt.Printf(&quot;helloworld\n&quot;);  </span><br><span class="line">echo &quot;helloworld&quot;  </span><br><span class="line">&lt;h1&gt;helloworld&lt;h1&gt;  </span><br><span class="line">print(&quot;hello world&quot;)</span><br></pre></td></tr></table></figure><blockquote><p>大小</p></blockquote><p><code># 一号字</code></p><h1><span id="一号字">一号字</span></h1><p><code>## 二号字</code></p><h2><span id="二号字">二号字</span></h2><p><code>### 三号字</code></p><h3><span id="三号字">三号字</span></h3><p><code>#### 四号字</code></p><h4><span id="四号字">四号字</span></h4><blockquote><p>居中,字体,颜色</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;center&gt;&lt;font color=red size=3 face=&quot;Monospace&quot;&gt;居中&lt;/font&gt;&lt;font color=black size=5&gt;字体&lt;/font&gt;&lt;font color=blue size=6&gt;颜色&lt;/font&gt;&lt;/center&gt;</span><br></pre></td></tr></table></figure><center><font color="red" size="3" face="Monospace">居中</font><font color="black" size="5">字体</font><font color="blue" size="6">颜色</font></center><blockquote><p>空格,列表</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&amp;ensp;</span><br><span class="line">&amp;emsp;</span><br><span class="line">&amp;ensp;&amp;emsp;</span><br></pre></td></tr></table></figure><p> 一个空格<br> 两个空格<br>  三个空格</p><p>无序列表： - + *<br>有序列表：1. 2. 3.<br>可以混合使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- 一级标题  </span><br><span class="line">    + 二级标题  </span><br><span class="line">        + 二级标题  </span><br><span class="line">            * 三级标题  </span><br><span class="line">            * 三级标题  </span><br><span class="line">                1. 四级标题</span><br><span class="line">                2. 四级标题</span><br></pre></td></tr></table></figure><ul><li>小标题<ul><li>二级标题</li><li>二级标题<ul><li>三级标题</li><li>三级标题<ol><li>四级标题</li><li>四级标题</li></ol></li></ul></li></ul></li></ul><blockquote><p>链接,图片</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[链接](链接地址)</span><br></pre></td></tr></table></figure><p><a href="https://walkdeadtobe.github.io/" target="_blank" rel="noopener">我的链接</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![用来描述图片的关键词](https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=702257389,1274025419&amp;fm=27&amp;gp=0.jpg &quot;我是可有可无的标题,划过图片可见)</span><br></pre></td></tr></table></figure><p><img src="https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=702257389,1274025419&amp;fm=27&amp;gp=0.jpg" alt="用来描述图片的关键词" title="我是可有可无的标题,划过图片可见"></p><blockquote><p>加粗,倾斜,斜体加粗,删除</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">**这是加粗的文字**  </span><br><span class="line">*这是倾斜的文字*  </span><br><span class="line">***这是斜体加粗的文字***  </span><br><span class="line">~~这是加删除线的文字~~</span><br></pre></td></tr></table></figure><p><strong>这是加粗的文字</strong><br><em>这是倾斜的文字</em><br><em><strong>这是斜体加粗的文字</strong></em><br><s>这是加删除线的文字</s></p><blockquote><p>引用</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;这是引用的内容  </span><br><span class="line">&gt;&gt;这是引用的内容  </span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;这是引用的内容</span><br></pre></td></tr></table></figure><blockquote><p>这是引用的内容</p><blockquote><p>这是引用的内容</p><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><p>这是引用的内容</p></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><blockquote><p>分割线</p></blockquote><p>三个或者三个以上的*或者-</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">---</span><br></pre></td></tr></table></figure><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">----</span><br></pre></td></tr></table></figure><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">***</span><br></pre></td></tr></table></figure><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*****</span><br></pre></td></tr></table></figure><hr><blockquote><p>表格</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">表头1|表头2|表头3</span><br><span class="line">---|:--:|---:</span><br><span class="line">内容|内容|内容</span><br><span class="line">内容|内容|内容</span><br></pre></td></tr></table></figure><table><thead><tr><th>表头1</th><th style="text-align:center">表头2</th><th style="text-align:right">表头3</th></tr></thead><tbody><tr><td>内容</td><td style="text-align:center">内容</td><td style="text-align:right">内容</td></tr><tr><td>内容</td><td style="text-align:center">内容</td><td style="text-align:right">内容</td></tr></tbody></table><p>第二行分割表头和内容。</p><ul><li>有一个就行，为了对齐，多加了几个<br>文字默认居左<br>-两边加：表示文字居中<br>-右边加：表示文字居右<br>注：原生的语法两边都要用 | 包起来.</li></ul><blockquote><p>注释</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--哈哈我是注释，不会在浏览器中显示。--&gt;</span><br><span class="line">[comment]: &lt;&gt; (哈哈我是注释，不会在浏览器中显示。)</span><br><span class="line">[comment]: &lt;&gt; (哈哈我是注释，不会在浏览器中显示。)</span><br><span class="line">[comment]: &lt;&gt; (哈哈我是注释，不会在浏览器中显示。)</span><br><span class="line">[//]: &lt;&gt; (哈哈我是注释，不会在浏览器中显示。)</span><br><span class="line">[//]: # (哈哈我是注释，不会在浏览器中显示。)</span><br><span class="line">[^_^]: # (哈哈我是注释，不会在浏览器中显示。)</span><br></pre></td></tr></table></figure><!--哈哈我是注释，不会在浏览器中显示。--><blockquote><p>流程图</p></blockquote><p><a href="https://support.typora.io/Draw-Diagrams-With-Markdown/" target="_blank" rel="noopener">markdown 教程</a></p><p>&lt;!–￼15–&gt;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">st=&gt;start: Start</span><br><span class="line">op=&gt;operation: Your Operation</span><br><span class="line">cond=&gt;condition: Yes or No?</span><br><span class="line">e=&gt;end</span><br><span class="line"></span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;op</span><br><span class="line">​</span><br></pre></td></tr></table></figure><pre><code>&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&gt;在不支持latex的md中插入公式暂时的方法是使用在线latex网站生成公式的图片，然后复制图片链接展示[在线latex编辑网站](http://latex.codecogs.com/eqneditor/samples/example1.php)&gt;页面内跳转[我在这里](#id1)&lt;span id='id1'&gt;我要跳转&lt;a href='#id1'&gt;我要跳转</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>系统迁移</title>
      <link href="/2019/11/09/%E8%BF%81%E7%A7%BB/"/>
      <url>/2019/11/09/%E8%BF%81%E7%A7%BB/</url>
      
        <content type="html"><![CDATA[<p>这套系统由4部分组成</p><p>Logstash是一个开元数据收集引擎，具备实时管道功能；Logstash可以动态的将俩字不同来源的数据统一起来，并将数据标准化至你所选择的目的地。这里我们选择的Elasricearch</p><p>Elastricearch 是一个分布式可扩展的实时搜索的分析引擎，一个建立在全文搜索引擎Apache Lucene 基础上的搜索引擎，Elastricsearch 不仅包括全文搜索功能，还可以进行</p><ul><li>分布式实时文件存储，将每一个字段都编入索引，使之可以被搜索</li><li>实时分析的分布式搜索引擎</li><li>可以扩展到上百台服务器上，处理PB级别的结果或者非结构化数据</li></ul><p>FIleBeat  是一个日志文件托运工具，在服务器安装客户端后，FIlebeat可以监控日志目录或者指定的日志文件，追踪读取这些文件（追踪文件的变化，不停的读），并且转发这些信息到elasticsearch或者logstarsh中存放。</p><p>Metricbeat可以定期收集操作系统和服务器的运行指标（CPU，内存，硬盘，IO,读写速度，进程等等），Metricbeat可以将收集到的指标和数据发送到你指定的输出，比如：elasticsearch，最终达成监视服务器的目标。</p><p>Kibana是一个开源的分析和可视化平台，设计用于和Elasticsearch一起工作。你用Kibana来搜索，查看，并和存储在Elasticsearch索引中的数据进行交互。你可以轻松地执行高级数据分析，并且以各种图标、表格和地图的形式可视化数据。Kibana使得理解大量数据变得很容易。它简单的、基于浏览器的界面使你能够快速创建和共享动态仪表板，实时显示Elasticsearch查询的变化。</p><p><font size="6">kong</font></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">log_format json_log escape=json &apos;&#123; &quot;@timestamp&quot;: &quot;$time_iso8601&quot;, &apos;  &apos;&quot;remote_addr&quot;: &quot;$remote_addr&quot;, &apos;  &apos;&quot;referer&quot;: &quot;$http_referer&quot;, &apos;  &apos;&quot;request&quot;: &quot;$request&quot;, &apos;  &apos;&quot;status&quot;: $status, &apos;  &apos;&quot;bytes&quot;:$body_bytes_sent, &apos;  &apos;&quot;agent&quot;: &quot;$http_user_agent&quot;, &apos;  &apos;&quot;user&quot;: &quot;$http_username&quot;, &apos; &apos;&quot;x_forwarded&quot;: &quot;$http_x_forwarded_for&quot;, &apos;  &apos;&quot;upstr_addr&quot;: &quot;$upstream_addr&quot;,&apos;  &apos;&quot;upstr_host&quot;: &quot;$upstream_http_host&quot;,&apos;  &apos;&quot;ups_resp_time&quot;: &quot;$upstream_response_time&quot; &#125;&apos;;</span><br><span class="line">access_log logs/access.log json_log;</span><br></pre></td></tr></table></figure><p><font size="6">logstash</font></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">#filebeat_kong.conf</span><br><span class="line">input&#123;</span><br><span class="line">   beats &#123;</span><br><span class="line">        type =&gt; &quot;nginx-log&quot; #&quot;logs&quot;</span><br><span class="line">        port =&gt; 9044</span><br><span class="line">          &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">filter&#123;</span><br><span class="line">    json&#123; #获取nginx log日志</span><br><span class="line">        source =&gt; &quot;message&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    mutate&#123;# 删去logstash转化后保留的messegae字段</span><br><span class="line">            remove_field =&gt; [&quot;message&quot;]</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">output&#123;</span><br><span class="line">    stdout &#123; codec =&gt; rubydebug &#125;</span><br><span class="line">    elasticsearch &#123;</span><br><span class="line">        hosts =&gt; [&quot;10.1.1.46:9200&quot;]</span><br><span class="line">        index =&gt; &quot;system-syslog-%&#123;+YYYY.MM&#125;&quot;</span><br><span class="line">        document_type =&gt; &quot;logs&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font size="6">filebeat</font></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#filebeat.yml</span><br><span class="line">filebeat.prospectors:</span><br><span class="line"></span><br><span class="line">- input_type: log</span><br><span class="line"> # encoding: UTF-8</span><br><span class="line">  paths:</span><br><span class="line">    - /home/LAB/chengr/kong_log/file.log</span><br><span class="line">  json.keys_under_root: true #在一次部署中发现这一行不能识别，最终注释之解决</span><br><span class="line">  #json.add_error_key: true</span><br><span class="line">  #json.message_key: log</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">output.logstash:</span><br><span class="line">  #The Logstash hosts</span><br><span class="line">  hosts: [&quot;10.1.1.46:9044&quot;]</span><br></pre></td></tr></table></figure><p><font size="6">elastcisearch</font></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#config/elasticsearch.yml</span><br><span class="line">cluster.name: my-es-cluster</span><br><span class="line">node.name: es-node-1</span><br><span class="line">path.data: /home/LAB/chengr/ELK/data/data-es</span><br><span class="line">path.logs: /home/LAB/chengr/ELK/log/log-es</span><br><span class="line">network.host: 10.1.1.46</span><br><span class="line">http.port: 9200</span><br></pre></td></tr></table></figure><p><font size="6">kibana</font></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#config/kibana.yml</span><br><span class="line">server.port: 5601</span><br><span class="line">elasticsearch.url: &quot;http://10.1.1.46:9200&quot;</span><br></pre></td></tr></table></figure><p>ps:部署在实际机器上时将配置中ip改为对应的IP</p><p><font size="5">kibana 添加邮件预警 </font><br><a href="http://www.cnblogs.com/small-k/p/8551960.html" target="_blank" rel="noopener">http://www.cnblogs.com/small-k/p/8551960.html</a><br><a href="https://blog.51cto.com/10546390/2051676" target="_blank" rel="noopener">https://blog.51cto.com/10546390/2051676</a></p><p>ps:<a href="https://docs.konghq.com/0.13.x/configuration/?_ga=2.242544130.102618566.1558236281-1173907870.1558236281#proxy_access_log" target="_blank" rel="noopener">kong 相关配置地址</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Aminer</title>
      <link href="/2019/11/03/Aminer/"/>
      <url>/2019/11/03/Aminer/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/t6am3/AMiner_Name_Disambiguation" target="_blank" rel="noopener">Github 项目地址</a><br>这是一场关于论文 同名消歧的比赛,<a href="https://biendata.com/competition/aminer2019/data/" target="_blank" rel="noopener">项目地址</a><br>我们主要借鉴的<a href="https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&amp;arnumber=4597035&amp;tag=1" target="_blank" rel="noopener">论文</a><br>论文中发现直接聚类的效果不好，其思路是首先进行居于规则的原子聚类，然后基于原子聚类的结果进一步进行聚类算法，论文中所举的例子是层次聚类(Hierarchical Clustering)以及K-means聚类,论文中发现这种方法可以大幅提升正确率<br>但是我们在实际中发现,论文中所提及的原子聚类效果并不好，也有可能是这场比赛所提供的数据集的问题，最终我们尝试使用自己首先进行规则上的归类，然后再进行基于层次聚类以及K-means聚类</p>]]></content>
      
      
      
        <tags>
            
            <tag> Competition ML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>distributed algorithm</title>
      <link href="/2019/10/27/%E5%88%86%E5%B8%83%E5%BC%8F%E7%AE%97%E6%B3%95/"/>
      <url>/2019/10/27/%E5%88%86%E5%B8%83%E5%BC%8F%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Raft</p></blockquote><p><a href="https://cloud.tencent.com/developer/news/263309" target="_blank" rel="noopener">参考链接</a><br>Raft是一个一致性算法，旨在易于理解。它提供了Paxos的容错和性能。不同之处在于它被分解为相对独立的子问题，它清楚地解决了实际系统所需的所有主要部分。我们希望Raft能够为更广泛的受众提供共识，并且这个更广泛的受众将能够开发出比现在更多的高质量共识系统。</p><p>Raft是一个通过管理一个副本日志的一致性算法。它提供了跟(multi-)Paxos一样有效的功能，但是它的架构和Paxos不一样；它比Paxos更加容易理解，并且能用于生产环境中。为了加强理解，raft把一致性的问题分成了三个子问题，例如leader election, log replication, and safety,</p><p>Role</p><p>Leader，Follower，candidate</p><p>在Raft集群中，有且仅有一个Leader，在Leader运行正常的情况下，一个节点服务器要么就是Leader，要么就是Follower。Follower直到Leader故障了，才有可能变成candidate。</p><p>Leader负责把client的写请求log复制到follower。它会和follower保持心跳。每个follower都有一个timeout时间（一般为150ms~300ms），在接受到心跳的时候，这个timeout时间会被重置。如果follower没有接收到心跳，这些follower会把他们的状态变为candidate，并且开启新的一轮leader election。</p><p>term逻辑时钟</p><p>Term相当于paxos中的proposerID，相当于一个国家的朝代。term是一段任意的时间序号。每一任Leader都有一个与之前不同的term。</p><p>当Leader选举成功之后，一个节点成为了Leader，就会产生一个新的term，并且直到Leader故障，整个集群都会一直在这个term下执行操作。</p><p>如果leader选举失败了，则会再生成出一个term，再开启一轮leader选举。</p><p>Quorums：</p><p>多数派，意思是超过一半的机器存活，则这个机器可用，这个Quorums指的就是集群可用的指标。例如：集群中的节点数为2N，如果有N+1的机器存活，则代表集群可用，可接受请求，写入log，应用到state machine中去，执行操作。如果少于N+1个机器存活，则代表集群可用，可接受请求，可写入log，但不应用到state machine中去，不执行操作。</p><p>Leader Election</p><p>只有在下列两种情况下才会进行leader election：</p><p>在第一次启动raft集群的时候</p><p>在一个已存在的Leader故障的时候</p><p>选举流程：</p><p>如果以上两种任何一种发生了，所有的Follower无法再和Leader保持心跳，则它们都会等待一个（选举）timeout，如果其中一个Follower的timeout最先到时，则这个Follower变成candidate开始选举，</p><p>第一，增加term计数器，</p><p>第二，给自己投票并向所有其他的节点服务器请求投自己一票。</p><p>如果一个Follower在接受到投票请求时，接受到两个term相同的投票请求时（也就是说，产生了两个candidate），则在多个相同term的投票请求中，这个Follower只能给投给其中一个请求，只能投一票，并且按照先来先服务的原则投票。</p><p>如果这个candidate收到另外一个节点服务器的消息，并且这个节点服务器的term序号和当前的term序号一样大，甚至更大的话，则这个candidate选举失败，从而它的状态变成Follower，并且接受新的Leader。</p><p>如果一个candidate获得了Quorums选票N+1(2N为集群中节点的数目)，则它变成新的leader。</p><p>如果多个candidate和多个Follower投完票之后，有多个candidate获得了相同的票数，则会产生split vote，则新的term产生，重新选举。Raft用随机选举timeout迅速地解决split vote问题，这个方法就是对于产生spit vote的candidates各自随机生成一个选举timeout，谁先到时，谁当leader，其他candidate都变为Follower。</p><p>当一个leader被选举出来之后，就在Follower timeout到时变为candidate之前，发心跳信息给所有Followers。</p><p>Log Replication（Raft协议具体过程）</p><p>Leader负责把client的请求日志复制给其他Followers。</p><p>Raft协议具体过程就是通过复制状态机的架构实现的，如下：</p><p>步骤：</p><p>Client发送请求给Leader，其中每个请求都是一条操作指令。</p><p>Leader接受到client请求之后，把操作指令(Entry)追加到Leader的操作日志中。紧接着对Follower发起AppendEntries请求、尝试让操作指令(Entry)追加到Followers的操作日志中，即落地。如果有Follower不可用，则一直尝试。</p><p>一旦Leader接受到多数（Quorums）Follower的回应，Leader就会进行commit操作，每一台节点服务器会把操作指令交给状态机处理。这样就保证了各节点的状态的一致性。</p><p>各服务器状态机处理完成之后，Leader将结果返回给Client。</p><p>Saftety</p><p>Raft的安全性，体现在如下几个方面：</p><p>Election safety:在一个term下，最多只有一个Leader。</p><p>Leader Append-Only:一个Leader只能追加新的entries，不能重写和删除entries</p><p>Log Matching:集群中各个节点的log都是相同一致的</p><p>Leader Completeness:如果一个log entry被committed了，则这个entry一定会出现在Leader的log里。</p><p>State Machine Safety:如果一个节点服务器的state machine执行了一个某个log entry命令，则其他节点服务器，也会执行这个log entry命令，不会再执行其他命令</p><p>之前四条，在前面都有所提及，而State Machine Safety是在Leader election过程中用到过。</p><p>State Machine Safety</p><p>一个candidate在选举的时候，它会向其他节点服务器发送包含他的log的消息，获取票数，如果它的log是最新的，则会获取选票，如果它的log不是最新的，其他节点服务器还有更加新的log，则会拒绝给这个candidate投票。这就保证了State Machine Safety。</p><p>所以State Machine Safety保证的就是一个candidate必须拥有最新的log，才能获取票数，才有机会赢得Leader选举，才有机会成为Leader。</p><p>Follower crashes</p><p>如果一个follower故障了，则不会再接受AppendEntriesandvoterequests，并且Leader会不断尝试与这个节点保持心跳。</p><p>如果这个节点恢复了，则会接受Leader的最新的log，并且将log应用到state machine中去，执行log中的操作</p><p>方格指的是client发出的一条请求。</p><p>方格虚线，说明一条log entry写入了log。</p><p>方格实线，说明一条log entry应用到state machine中</p><p>Leader crashes</p><p>则会进行Leader election。</p><p>如果碰到Leader故障的情况，集群中所有节点的日志可能不一致。</p><p>old leader的一些操作日志没有通过集群完全复制。new leader将通过强制Followers复制自己的log来处理不一致的情况，步骤如下：</p><p>对于每个Follower，new leader将其日志与Followers的日志进行比较，找到他们的达成一致的最后一个log entry。</p><p>然后删除掉Followers中这个关键entry后面的所有entry，并将其替换为自己的log entry。该机制将恢复日志的一致性。</p><p>下面这种情况集群中所有节点的日志可能不一致：</p><p>总结</p><p>Raft要求具备唯一Leader，并把一致性问题具体化为保持日志副本的一致性，以此实现相较Paxos而言更容易理解、更容易实现的目标。Raft是state machine system，Zab是primary-backup system。</p><p>引用</p><ul><li><a href="https://en.wikipedia.org/wiki/Raft_(computer_science)" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Raft_(computer_science)</a></li><li><a href="https://raft.github.io/" target="_blank" rel="noopener">https://raft.github.io/</a></li><li><a href="http://thesecretlivesofdata.com/raft/" target="_blank" rel="noopener">http://thesecretlivesofdata.com/raft/</a></li><li><a href="https://raft.github.io/raft.pdf" target="_blank" rel="noopener">https://raft.github.io/raft.pdf</a></li><li><a href="https://www.cnblogs.com/bangerlee/p/5991417.html" target="_blank" rel="noopener">https://www.cnblogs.com/bangerlee/p/5991417.html</a></li><li><a href="https://www.bilibili.com/video/av21667358/" target="_blank" rel="noopener">https://www.bilibili.com/video/av21667358/</a></li><li><a href="https://en.wikipedia.org/wiki/State_machine_replication" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/State_machine_replication</a></li><li><a href="https://github.com/CNiceToUpp/notes/blob/master/paxos%2Craft%2Czab/paper/In%20Search%20of%20an%20Understandable%20Consensus%20Algorithm.pdf" target="_blank" rel="noopener">https://github.com/CNiceToUpp/notes/blob/master/paxos%2Craft%2Czab/paper/In Search of an Understandable Consensus Algorithm.pdf</a></li></ul><blockquote><p>PAXOS</p></blockquote><p>它的假设前提是，在分布式系统中进程之间的通信会出现丢失、延迟、重复等现象，但不会出现传错的现象。Paxos算法就是为了保证在这样的系统中进程间基于消息传递就某个值达成一致。</p><p>在Paxos算法中，有两种角色：</p><p>Proposer<br>Acceptor<br>Paxos算法分为两个阶段。具体如下：</p><p>阶段一：<br>(a) Proposer选择一个提案编号N（全剧唯一version），然后向半数以上的Acceptor发送编号为N的Prepare请求。</p><p>(b) 如果一个Acceptor收到一个编号为N的Prepare请求，且N大于该Acceptor已经响应过的所有Prepare请求的编号，那么它就会将它已经接受过的编号最大的提案（如果有的话）作为响应反馈给Proposer，同时该Acceptor承诺不再接受任何编号小于N的提案。如果已经接受过，比较版本号大小，持久化最新的，并返回信息</p><p>阶段二：<br>(a) 如果Proposer收到半数以上Acceptor对其发出的编号为N的Prepare请求的响应，那么它就会发送一个针对[N,V]提案的Accept请求给半数以上的Acceptor。注意：V就是收到的响应中编号最大的提案的value，如果响应中不包含任何提案，那么V就由Proposer自己决定。</p><p>(b) 如果Acceptor收到一个针对编号为N的提案的Accept请求，只要该Acceptor没有对编号大于N的Prepare请求做出过响应，它就接受该提案。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/09/19/hello-world/"/>
      <url>/2019/09/19/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2><span id="quick-start">Quick Start</span></h2><h3><span id="create-a-new-post">Create a new post</span></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3><span id="run-server">Run server</span></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3><span id="generate-static-files">Generate static files</span></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3><span id="deploy-to-remote-sites">Deploy to remote sites</span></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2019/09/19/centos/"/>
      <url>/2019/09/19/centos/</url>
      
        <content type="html"><![CDATA[<p>centos  安装  psycopg2</p><p>直接 pip install psycopg2报错，根据错误 还需要安装 pip install psycopg2-binary/setuptools,以及  yum install gcc<br>可能还需要安装</p><ul><li>sudo yum install postgresql-libs</li><li>sudo yum install postgresql-devel</li><li>sudo yum install python-devel</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2019/09/19/README/"/>
      <url>/2019/09/19/README/</url>
      
        <content type="html"><![CDATA[<h1><span id="myblog">myblog</span></h1><p>my_github_blog in markdown</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Raft算法</title>
      <link href="/2019/09/17/Raft/"/>
      <url>/2019/09/17/Raft/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> algorithm 一致性 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bwg</title>
      <link href="/2019/09/04/Windows_terminal/"/>
      <url>/2019/09/04/Windows_terminal/</url>
      
        <content type="html"><![CDATA[<p>开始尝试使用windows terminal ,遇到有些问题记录下来<br>1.在termianl 进入Ubuntu 继续使用 windows安装的程序</p><ul><li>首先在 ~/.bashrc 中添加可执行程序的路径所在</li><li>使用 chmod +x 标识 可执行程序 可执行</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> windows terminal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Paxos</title>
      <link href="/2019/08/12/Paxos/"/>
      <url>/2019/08/12/Paxos/</url>
      
        <content type="html"><![CDATA[<p>博客列表：</p><ul><li><a href="https://www.cnblogs.com/hugb/p/8955505.html" target="_blank" rel="noopener">图解分布式一致性协议Paxos</a></li></ul><p>相关概念</p><ul><li>拜占庭模型:<ul><li><a href="https://zh.wikipedia.org/wiki/%E6%8B%9C%E5%8D%A0%E5%BA%AD%E5%B0%86%E5%86%9B%E9%97%AE%E9%A2%98" target="_blank" rel="noopener">wiki 拜占庭问题</a></li><li>分布式对等网路容错问题：在分布式对等网络中需要按照共同一致策略协作的成员计算机即为问题中的将军，而各成员计算机赖以进行通讯的网络链路即为信使。拜占庭将军问题描述的就是某些成员计算机或网络链路出现错误、甚至被蓄意破坏者控制的情况。</li></ul></li><li>非拜占庭模型：<ul><li>指可能出现故障，但是不会伪造信息的情况(即，要么收不到信息，要么收到真实的信息)</li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Distributed System 一致性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git 学习</title>
      <link href="/2019/07/22/Git/"/>
      <url>/2019/07/22/Git/</url>
      
        <content type="html"><![CDATA[<p>GIT 可以分为本地的内容寻址系统(content-addressable filesystem) 和 远程的分布式的版本控制系统(version control system)</p><blockquote><p>在本地其核心可以看做一个简单的键值对数据存储系统,value 是实际存储的文件(.git/objects 目录下),key是文件的SHA-1值,因而我们用key 找回(retrieve) 历史内容<br>远程内容待补充</p></blockquote><p>目录解析<br>.git<br>├── COMMIT_EDITMSG<br>├── FETCH_HEAD<br>├── HEAD<br>├── config<br>├── description<br>├── index<br>├── hooks//以下是文件夹<br>├── info<br>├── logs<br>├── objects<br>└── refs</p><p>1.git/COMMIT_EDITMSG</p><blockquote><p>记录commit附带的说明，经测试只记录最新的commit 说明</p></blockquote><p>2.git/FETCH_HEAD</p><blockquote><p>记录从远程仓库fetch的各分支的Head</p></blockquote><p>3.git/HEAD</p><blockquote><p>表示当前分支的Head</p></blockquote><p>4.git/config</p><blockquote><p>当前 git仓库的配置文件。保存这 git仓库的远程地址,远程仓库分支等</p></blockquote><p>5.git/index</p><blockquote><p>暂存区:存储时间戳,文件名,文件的SHA值等元数据<br>每当我们执行 git add操作的时候， git会给添加的每个文件的内容创建一个对象，然后把这个文件的路径和生成的对象进行映射，存放到 .git/index文件中。等到后期新的命令（比如：git add、 git rm或者 git mv）执行的时候，又会重新更新索引。</p></blockquote><p>6.git/hook</p><blockquote><p>伴随着git的命令所触发的处理脚本,通常在 git init 时拷贝到新目录<br>具体脚本可分为客户端和服务端两种,待补充</p></blockquote><p>7.git/info</p><blockquote><p>关于仓库的的其他信息<br>例如.git/info/exclude 可以排除本地本人不想提交的文件,只与自己相关,该文件也不会上传,可用于排除私人的某些配置等,注意与全局的 .gitignore 文件区别</p></blockquote><p>8.git/logs</p><blockquote><p>记录仓库各分支上提交的commit操作/修改,可以通过 git log 查看</p></blockquote><p>9.git/objects</p><blockquote><p>真正保存代码的地方。其中分成两种类型的文件，一种是 pack，另外的是 blob文件。其中 pack是根据定位内容非常相似的全部文件，然后为他们之一存储整个内容。之后计算相似文件之间的差异并且只存储差异。而 blob文件就是记录差异。blob是“二进制大对象”（ binary largeobject）的简写，是计算机领域常用术语，用来指代某些可以包含任意数据的变量或文件<br>.git/objects:三种类型</p><blockquote><p>blob :实际存储的文件,<a href="https://www.git-scm.com/book/en/v2/Git-Internals-Git-Objects" target="_blank" rel="noopener">具体详情</a><br>tree : 当前project的一个快照,存储多个实体/数据结构(由blob object的git mode,类型,SHA-1值,文件名构成),记录了当前tree下所有文件所指向的blob object<br>commit: 记录所产生的tree object,作者,时间,commit msg,上一个commit object<br>tag: 根据我查看的文件结构与commit相同,但引用博客中说没有记录tree object,而记录创建tag 所在的commit object,是因为更新了？</p></blockquote></blockquote><blockquote><p>.git/objects/info 关于object的其他信息<br>.git/objects/pack 在git gc  或者 git push 时,git 会将松散的object文件打包压缩,降低存储空间 <a href="https://www.git-scm.com/book/en/v2/Git-Internals-Packfiles" target="_blank" rel="noopener">详情</a></p></blockquote><p>10.git/refs</p><blockquote><p>引用文件<br>.git/refs/heads 记录本地各分支最新状态(文件中存储git object 的SHA-1值),即指向最后一次commit提交只有产生的git object<br>.git/refs/tags<br>.git/refs/remotes 记录远程各分支最新状态(文件中存储git object 的SHA-1值),同样指向本地的git object(每次fetch或者pull会拉去远程的更新)</p></blockquote><p>常见命令的实际流程：</p><blockquote><p>git add/commit<br>git push</p></blockquote><p>跟随态 VS 游离态</p><p>参考：<br>1.<a href="https://www.siteground.com/tutorials/git/directory-structure/" target="_blank" rel="noopener">Git Directory</a><br>2.<a href="https://www.git-scm.com/book/en/v2/Git-Internals-Git-References" target="_blank" rel="noopener">Git Ref</a><br>3.<a href="https://www.git-scm.com/docs/githooks" target="_blank" rel="noopener">Git hooks</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> git  file </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go</title>
      <link href="/2019/07/22/go/"/>
      <url>/2019/07/22/go/</url>
      
        <content type="html"><![CDATA[<h2><span id="go语言学习">Go语言学习</span></h2><h3><span id="注意点">注意点</span></h3><h4><span id="变量类型">变量类型</span></h4><ol><li>切片和指针都是引用类型</li><li>实际存储的字符的ascii值，没有char,取而代之的是byte(uint8),rune(int32)</li><li>raw string？？</li><li>fmt.Println 与 println的区别</li><li>list.List 与 list.New() 的[区别]](<a href="https://golang.org/pkg/container/list/" target="_blank" rel="noopener">https://golang.org/pkg/container/list/</a>)<a href="https://blog.csdn.net/xxx9001/article/details/52574501" target="_blank" rel="noopener">CSDN</a><br>list.List 返回的是一个结构体值类型,list.New()返回的是一个初始化的结构体的指针类型，区别在于1.作为函数参数传入时,list.List不可更改，而指针类型可更改2.传入参数需要与函数定义相同,即函数定义的是值类型，那么只能传入值类型</li></ol><h2><span id="分布式系统学习第一弹">分布式系统学习第一弹</span></h2><p><a href="https://pdos.csail.mit.edu/6.824/labs/lab-1.html" target="_blank" rel="noopener">MIT 6.824</a><br>按照课程要求，下载源码<br>修改一：添加日志，在 go  init 函数更改日志格式,使得输出时带位置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//init log format</span><br><span class="line">func init()&#123;</span><br><span class="line">    log.SetFlags(log.Ldate| log.Lshortfile |log.Ltime |log.LUTC)</span><br><span class="line">&#125;</span><br><span class="line">//样例输出</span><br><span class="line">2019/07/22 07:34:41 master_splitmerge.go:23: Merge: open mrtmp.test-res-0: no such file or directory</span><br></pre></td></tr></table></figure><h2><span id="cache2go-学习">cache2go 学习</span></h2><p><a href="https://blog.csdn.net/notbaron/article/details/52008155" target="_blank" rel="noopener">项目结构 简介</a><br><a href="https://blog.csdn.net/zhizhengguan/article/details/84257338" target="_blank" rel="noopener">Go缓存库cache2go介绍</a></p><h2><span id="go-语言">go 语言</span></h2><p>实现长度为变量的二维数组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var status [][]int</span><br><span class="line">for i := 0; i &lt; len(variable1); i++ &#123;</span><br><span class="line">var statu = make([]int, len(variable2))</span><br><span class="line">status = append(status, statu)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>range</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">for _, num := range nums &#123;</span><br><span class="line">    sum += num</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(&quot;sum:&quot;, sum)</span><br><span class="line">//在数组上使用range将传入index和值两个变量。上面那个例子我们不需要使用该元素的序号，所以我们使用空白符&quot;_&quot;省略了。有时侯我们确实需要知道它的索引。</span><br><span class="line">for i, num := range nums &#123;</span><br><span class="line">    if num == 3 &#123;</span><br><span class="line">        fmt.Println(&quot;index:&quot;, i)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>make vs new</p>]]></content>
      
      
      
        <tags>
            
            <tag> MIT6.824 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划学习</title>
      <link href="/2019/07/10/dp/"/>
      <url>/2019/07/10/dp/</url>
      
        <content type="html"><![CDATA[<p>参考资料：</p><ul><li><a href="https://wenku.baidu.com/view/cd5dc88ef80f76c66137ee06eff9aef8951e4854.html" target="_blank" rel="noopener">百度文库资料</a></li><li><a href="https://www.cnblogs.com/Renyi-Fan/p/9285495.html" target="_blank" rel="noopener">博客</a></li></ul><p>动态规划(dynamic programming)<br>条件：</p><ol><li>最优子问题结构</li><li>子问题重叠性质</li><li>无后效性</li></ol><p>动态规划分类</p><ul><li>线性型<ul><li>简介：在线性空间上的递推dp</li><li>思路：</li><li>例子：最长上升子序列(LIS)、最长公共子序列(LCS)、最大子序列和</li></ul></li><li>区间型<ul><li>简介：区间dp就是在区间上进行动态规划，求解一段区间上的最优解。可以是二维的也可以是三维的，一般情况下为二维；</li><li>思路：主要是通过合并小区间的 最优解进而得出整个大区间上最优解的dp算法</li><li>例子：</li></ul></li><li>背包型<ul><li>简介：</li><li>思路：</li><li>例子：0-1背包、完全背包、分组背包、多重背包</li></ul></li><li>树型<ul><li>简介：建立在树这种数据结构上的dp</li><li>思路：一般可以通过dfs维护从根到叶子或从叶子到根的状态转移</li></ul></li><li>其他<ul><li>矩阵型</li><li>序列型</li><li>双序列型</li><li>划分型</li><li>状态压缩型</li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> dp  algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lua</title>
      <link href="/2019/07/10/lua/"/>
      <url>/2019/07/10/lua/</url>
      
        <content type="html"><![CDATA[<p><br>因为决定学习开发网关kong的插件，所以需要学习lua语言，正在从<a href="https://www.runoob.com/lua/" target="_blank" rel="noopener">Lua 菜鸟教程</a>学习<br><br>关于kong插件开发的博客 <a href="https://www.jianshu.com/p/68457b42b84f" target="_blank" rel="noopener">链接1</a><br><br>发现一个很有意思的lua 模块  :openresty 的lua-resty-template 模块，提供模板渲染的功能<br><br>准备在网关处进行对于token的检验工作，由于没有使用已有的oauth server 插件，所以需要自己写个额外插件<br>在这个插件中主要需要完成的工作是从cookie 中 提取出 token ,并以此为凭借到oauth  server 进行相关检验，如果检验成功，应当返回id 以及这个token的ttl ,网关处获得id 应当 将之体现在日志里(插件逻辑处新建header,在nginx日志处自定义日志格式,指明该id或者在网关处建立与oauth server相同的用户体系，起码账户名一致，这样根据id 可以从数据库中提取出相应的consumer credential ,这样的话可以用于后续的基于用户的限流等操作)<br>主要点在于1.Lua中进行http 操作  ,<a href="https://github.com/ledgetech/lua-resty-http#request" target="_blank" rel="noopener">Github 源码文档</a><br>2.考虑对token进行缓存,[‘token’,‘id’,ttl],这样无需多次存取(可能带来的问题有，注销登录后如何通知网关注销token：这又分为两种注销后不再登录和重新登陆，对于后者可以下次请求经过网关时,注销相同id的键值对)<br><a href="https://github.com/openresty/lua-resty-redis/" target="_blank" rel="noopener">Github lua-resty-redis</a><br><a href="https://github.com/Kong/kong/blob/master/kong/plugins/rate-limiting/policies/init.lua" target="_blank" rel="noopener">Kong rate-limiting 插件</a>中涉及对于redis的操作,可以观摩下</p><p><br>目前在网关处验证用户身份成功后，在后端为避免再次检验身份的需要，因此需要网关提供给后端身份凭据，认可这次身份凭据，同时应当提供某种验证手段，让后端验证请求是否身份凭据是否是真的/是否是伪造<br>方案1 ：利用某种对称加密算法,网关对用户身份进行加密,后端以相同的密钥进行解密,得到身份<br>确定使用AES算法<a href="https://github.com/openresty/lua-resty-string/" target="_blank" rel="noopener">Github 示例</a>,在网关处使用CBC加密，相同的偏移向量,结果转化为hex格式，传输到python后端，对结果转发，解密，但是解密始终得不到正确的结果，怀疑是<a href="https://blog.csdn.net/diodosu/article/details/51923670" target="_blank" rel="noopener">博客</a>中提到的问题，但是我在测试中设置的加密字段,加密密钥，偏移向量都是16位的，看起来应该不会有填充的问题才对，但是解密仍然失败<br>方案2 ：采取非对称加密算法，在网关处向后端传递两个header：userid,encrypted 在网关处按照某种方法加密得到 encrypt header,后端使用同样的方法加密，如果结果相同，则认为 userid 经过了网关的认证，同时加密内容应当是网关与后端之间相互约定的动态的内容</p><p><br>2020-1-10 代码更新，把硬编码信息改为插件的配置输入<br>curl -i -X POST <a href="http://localhost:8001/plugins" target="_blank" rel="noopener">http://localhost:8001/plugins</a> <br>–data “name=kong-plugin-myplugin” <br>–data “config.sso_domain=SS0_DOMAIN” <br>–data “config.check_path=CHECK_PATH” <br>–data “config.front_domain=FRONT_DOMAIN” <br>–data “config.client=CLIENT_JSON”</p><p>其中需要注意的是，kong网关对于插件配置的输入中对于字符 ‘&amp;’ 的支持不好，而使用’\&amp;‘的话，网关处接收后会转化为’\\&amp;’,看起来很不舒服，然后我 使用 ‘\a’ 字符代表 ‘&amp;’,在插件处理逻辑处再替换回来(需要注意的是如果单个的’'存在，会影响 string 转化为 json)</p>]]></content>
      
      
      
        <tags>
            
            <tag> lua </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>regex</title>
      <link href="/2019/07/09/regex/"/>
      <url>/2019/07/09/regex/</url>
      
        <content type="html"><![CDATA[<p>最近需要从nginx header中提取出变量，需要学习正则表达式相关知识<br><a href="https://www.runoob.com/regexp/regexp-tutorial.html" target="_blank" rel="noopener">菜鸟教程 正则表达式</a></p><blockquote><p>可以使用 $1 $2 $3等来表示匹配的变量<br>例如 对于字符串  A90B3C  ,正则表达式  /A(\d+)B(\d+)C/  匹配的 $1=90 $2=3<br>亦或者 对于正则表达式 /A((\d+)B)(\d+)C/  匹配的 $1=90B  $2=90  $3=3</p></blockquote><br>>对实际应用可以匹配  $http_cookie ~ token=([a-z0-9]*);api_key=([a-z0-9]*)在实际搜素中发现有人使用 {variable}以及<variable> 来匹配变量 variable ，但是在查询文档中没有发现这种用法，也欸有试过是否能用</variable>]]></content>
      
      
      
        <tags>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx</title>
      <link href="/2019/06/29/nginx/"/>
      <url>/2019/06/29/nginx/</url>
      
        <content type="html"><![CDATA[<blockquote><p>rewrite规则必须匹配对应的域名才能生效，比如是server_name <a href="http://xn--aa-tz2c.com" target="_blank" rel="noopener">为aa.com</a> 下的rewrite 规则，则必须访问时前缀是 <a href="http://aa.com" target="_blank" rel="noopener">aa.com</a> ，rewrite规则才能生效</p></blockquote><p>在 nginx 反向代理处直接拒绝不携带token的请求</p><blockquote><p>在 server 内 ，loaction 前对于所有请求 判断cookie内是否携带token(先不管token是否有效)，其中排除对包含code/oauth/static的请求，如果不携带，则使之跳转到授权服务器，登录后自动跳转到首页</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// if ( $request_uri ~* (.*)210.14.118.96(.*))</span><br><span class="line"> // &#123;  rewrite ^/(.*)$  http://localhost:80/$1 break; &#125;</span><br><span class="line">  set $flag 1;</span><br><span class="line"></span><br><span class="line">  if ( $http_cookie ~* (.*)token=(.*) )</span><br><span class="line">  &#123; set $flag 0; &#125;</span><br><span class="line"></span><br><span class="line">  if ( $request_uri ~* (.*)code=(.*))</span><br><span class="line">  &#123; set $flag 0; &#125;</span><br><span class="line"></span><br><span class="line">  if ( $request_uri ~* (.*)oauth(.*))</span><br><span class="line">  &#123; set $flag 0; &#125;</span><br><span class="line"></span><br><span class="line">  if ( $request_uri ~* (.*)static(.*))</span><br><span class="line">  &#123; set $flag 0; &#125;</span><br><span class="line"></span><br><span class="line">  if ( $request_uri ~* (.*)/js/(.*))</span><br><span class="line">  &#123; set $flag 0; &#125;</span><br><span class="line"></span><br><span class="line">  if ( $request_uri ~* (.*)/css/(.*))</span><br><span class="line">  &#123; set $flag 0; &#125;</span><br><span class="line"></span><br><span class="line">  if ( $http_referer = &quot;http://210.14.118.96/&quot; )</span><br><span class="line">  &#123; set $flag 0; &#125;</span><br><span class="line"></span><br><span class="line">  if ( $http_referer = &quot;&quot; )</span><br><span class="line">  &#123; set $flag 0; &#125;</span><br><span class="line"></span><br><span class="line">  if ( $flag = 1)&#123;</span><br><span class="line">  //rewrite ^(.*)$ http://111.203.146.69/oauth/authorize?client_id=kexie&amp;redirect_uri=http://210.14.118.96/ep/cookie.html&amp;response_type=code&amp;scope=read permanent;# redirect;</span><br><span class="line">  return 301  http://111.203.146.69/oauth/authorize?client_id=kexie&amp;redirect_uri=http://210.14.118.96/ep/cookie.html&amp;response_type=code&amp;scope=read;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><blockquote><p>需要注意的是 从网上博客看，/etc/nginx/nginx.conf 的优先级比 /etc/nginx/conf.d/* 以及/etc/nginx/sites-enables/*优先级高，  但是如果后面的配置中标明了default_server，那么优先级应该是更高的(实际效果，没有去网上查找核实);导致后者的server_name:_  覆盖了前者的server_name:210.14.118.96</p></blockquote><p>在vue项目中 ，全局配置使得请求携带cookie<br>修改 ./src/main.js 添加 <a href="https://github.com/pagekit/vue-resource/issues/191" target="_blank" rel="noopener">相关问题连接</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &quot;vue&quot;;</span><br><span class="line">import VueAwesomeSwiper from &apos;vue-awesome-swiper&apos;</span><br><span class="line">import &apos;swiper/dist/css/swiper.css&apos;</span><br><span class="line">import App from &quot;./App.vue&quot;;</span><br><span class="line">import router from &quot;@/router/index&quot;;</span><br><span class="line">import store from &quot;@/store/index&quot;;</span><br><span class="line">import ElementUI from &quot;element-ui&quot;</span><br><span class="line">import &apos;element-ui/lib/theme-chalk/index.css&apos;</span><br><span class="line">import echarts from &quot;echarts&quot;;</span><br><span class="line">import &#123; debounce &#125; from &quot;@/assets/scripts/util&quot;;</span><br><span class="line">import starSky from &quot;@/assets/scripts/common/canvas.js&quot;;</span><br><span class="line">import echartTheme from &quot;@/constant/chalk.project.json&quot;</span><br><span class="line">//添加内容-开始</span><br><span class="line">import VueResource from &apos;vue-resource&apos;</span><br><span class="line">Vue.use(VueResource)</span><br><span class="line">Vue.http.options.xhr = &#123; withCredentials: true &#125;;</span><br><span class="line">//添加内容-结束</span><br><span class="line">echarts.registerTheme(&quot;chalk&quot;, echartTheme);</span><br><span class="line">Vue.config.productionTip = false;</span><br><span class="line">Vue.use(VueAwesomeSwiper)</span><br><span class="line">Vue.use(ElementUI)</span><br><span class="line">Vue.prototype.$charts = echarts;</span><br><span class="line">Vue.prototype.$debounce = debounce;</span><br><span class="line">Vue.prototype.$starSky = starSky;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  router,</span><br><span class="line">  store,</span><br><span class="line">  render: h =&gt; h(App)</span><br><span class="line">&#125;).$mount(&quot;#app&quot;);</span><br></pre></td></tr></table></figure><p>此外报错，需要安装插件</p><blockquote><p>npm install --save vue-resource</p></blockquote><blockquote><p>清除cookie 使用</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">document.cookie = &quot;token=;expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/&quot;; </span><br><span class="line">document.cookie = &quot;token=;expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/ep&quot;;</span><br></pre></td></tr></table></figure><p>而 setCookie()不能删除不同域下cookie</p><blockquote><p>当使用 upstream 代指 上游 多个可用服务器，nginx会根据 error  timeout 来自动替换选择 可用服务器，但是不支持对于有状态码的返回，此外我们可以配置自动检查后端情况以及相应处理 ,<a href="https://www.nginx.com/resources/wiki/modules/healthcheck/" target="_blank" rel="noopener">Nginx ngx_http_healthcheck_module</a>  <a href="https://github.com/cep21/healthcheck_nginx_upstreams/blob/master/README" target="_blank" rel="noopener">Github healthcheck_nginx_upstreams</a><br>而在目前项目中，由于前端nginx调用后面网关 ，所以需要已具有某些状态码来决定是否轮替， 例如</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">upstream backends &#123;</span><br><span class="line">server 192.2.0.1;</span><br><span class="line">server 192.2.0.2;</span><br><span class="line">…</span><br><span class="line">&#125;</span><br><span class="line">server&#123;</span><br><span class="line">  location / &#123;</span><br><span class="line">  proxy_pass http://backends;</span><br><span class="line">  proxy_next_upstream error timeout http_404 http_502 http_500;#依据状态码确定轮替，此外在 多个nginx转发情况下使用 timeout，会导致其它一些问题，简单的方式是除去timeout </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>出于实际需要，需要在kong网关处进行添加自定义插件，其中逻辑需要添加自定义header，使用 ngx.request.set_header(name,value)<br>但是发现自己在网关处添加的header无法传递到(Django)后端,遍历httprequest.MEAT也没有发现，最终经过查询发现 nginx 默认(可以通过配置 underscores_in_headers  on)不允许 header name 中携带 下划线,可以除去下划线或者用’-‘代替’<em>’,但是好奇的是在网关处 带下划线的header 仍然可以使用<br>可以使用 ngx.req.get_header(name) 查询，以及在日志中也可以配置 http_name得到值，或许只是不能够传出去??</em></p>]]></content>
      
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>postgresql</title>
      <link href="/2019/06/22/psql/"/>
      <url>/2019/06/22/psql/</url>
      
        <content type="html"><![CDATA[<p>按照官网教程安装postgresql数据库<br><a href="https://www.postgresql.org/download/linux/redhat/" target="_blank" rel="noopener">https://www.postgresql.org/download/linux/redhat/</a><br>输入</p><blockquote><p>su - postgres<br>进入 postgresql 用户<br>输入<br>psql<br>进入数据库<br>输入<br>\c kong<br>切换数据库<br>输入<br>select * from pg_tables where schemaname = ‘public’;<br>查询该数据库的所有表</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>系统配置</title>
      <link href="/2019/06/19/%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/"/>
      <url>/2019/06/19/%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>安装mysql，按照官网教程来即可 <a href="https://dev.mysql.com/doc/refman/8.0/en/linux-installation-yum-repo.html" target="_blank" rel="noopener">官网连接</a><br>在 windows 下安装MySQL时会出现错误</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">D:\Software\Mysql-8.0.17-winx64\bin&gt;net start MySQL</span><br><span class="line">服务没有响应控制功能。</span><br><span class="line">请键入 NET HELPMSG 2186 以获得更多的帮助。</span><br></pre></td></tr></table></figure><p>解决方法：在windows 服务控制中，设置MySQL服务的属性-&gt;登陆-&gt;登陆身份  中设置身份为此身份，身份应当有Administration权限<br>安装java</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bwg</title>
      <link href="/2019/06/17/bwg/"/>
      <url>/2019/06/17/bwg/</url>
      
        <content type="html"><![CDATA[<p>今天尝试给bwg上的vpn安装上支持 IPV4,IPV6和多端口（即监听来自IPV4,ipv6的多个端口的访问）<br>弄了半天，把多端口访问的问题，弄好了，但是同时允许IPV4，IPv6的不行，被恶心了（有空再折腾这个）<br>暂且记录下流程</p><ul><li>寻找多端口的方法；由于我的配置是基于openvpn，只能设置一个端口；多端口的话，可以安装基于python实现的shadowsocks</li><li>进行最后一步发现，都是对ssserver的配置</li><li>尝试配置监听IPV4,IPV6访问，尝试过各种配置发现，最后找到以为博主的方法，从方法逻辑上看，是可以的，但是实际中不行，可能是我的其他配置问题（例如防火墙？），但下次再折腾这个，再次列出 <a href="http://jinke.me/2015-12-20-shadowsocks/" target="_blank" rel="noopener">链接</a>,因为比较敏感，以防丢失，暂且记录下思路；大概是分别存在IPv4与ipv6的配置文件，并启动shadowsocks 分配给不同的进程</li><li>由于基于python的shadowsocks很久都没有更新了，看github上的讨论，基于c语言的shadowsocks可以实现ipv4v6共存，因而尝试安装基于c语言的shadowsocks；</li><li>发现安装shadowsocks-libev 需要很多依赖，而且依赖循环依赖，很恶心，尝试了一阵后，因为马上有事，就暂且放弃</li><li>步骤1:在https://pkgs.org/上寻找需要的centosrpm包，下载，安装 ；步骤2：重复步骤1</li><li>注意点：下载rpm包时，注意与自己服务器的系统对应（比如 我的系统是centos6，下载的7，/(ㄒoㄒ)/~~）； 留心该命令  yum install --downloadonly --downloaddir=/root/rpm <package-name> 以及<a href="https://blog.csdn.net/xuxile/article/details/88699910" target="_blank" rel="noopener">链接</a>，似乎可以避免循环依赖的问题,但是尝试失败；在使用yum repolist all 查看时发现很多源都被禁止，不知道为什么？下次有空探究下；</package-name></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> vpn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>跨域问题小结</title>
      <link href="/2019/05/27/%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98%E5%B0%8F%E7%BB%93/"/>
      <url>/2019/05/27/%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98%E5%B0%8F%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>最近在做项目时经常遇到跨域问题，经历过这种折腾，最终有两种比较可行的方法，但总体而言都是代理转发</p><ul><li>在nginx上部署相关请求的代理转发，在将请求指向同域名的nginx服务器</li><li>将请求转发给网关，由网关做代理</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> cross_domain </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务授权</title>
      <link href="/2019/05/22/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%8E%88%E6%9D%83/"/>
      <url>/2019/05/22/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%8E%88%E6%9D%83/</url>
      
        <content type="html"><![CDATA[<p>目前准备使用外部授权认证服务与kong结合，kong可能制作简单的限流任务；<br>经过查询，发现kong在这里提供两个插件<br><a href="https://docs.konghq.com/hub/kong-inc/oauth2/" target="_blank" rel="noopener">OAuth 2.0 Authentication</a><br>和 <a href="https://docs.konghq.com/hub/kong-inc/oauth2-introspection/" target="_blank" rel="noopener">OAuth 2.0 Introspection</a><br>前者主要可以提供Oauth 认证服务，而后者支持第三方的授权认证服务器，不过仅支持企业版<br>最后找到一个github同仁自己基于 lua开发的相关插件，<a href="https://github.com/mogui/kong-external-oauth" target="_blank" rel="noopener">链接</a></p><p>安装 这个额外插件，重新启动kong 时，luarock 需要luacrypto 去完成加密相关操作，故直接即可  sudo luarocks install luacrypto（从源码配置有点麻烦）</p><p>Spring Security 源码分析系列博客<br><a href="https://niocoder.com/categories/#Security" target="_blank" rel="noopener">链接1</a><br><a href="http://www.liuhaihua.cn/%E5%8F%B2%E4%B8%8A%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84-springcloud-%E6%95%99%E7%A8%8B" target="_blank" rel="noopener">链接2</a></p><p>spring 讲解<br><a href="https://www.cnblogs.com/RunForLove/p/4641672.html" target="_blank" rel="noopener">链接1</a></p><p>spring 默认配置<br><a href="https://www.jianshu.com/p/b02691ff4093" target="_blank" rel="noopener">链接1</a></p><p>springboot+springsecurity+oauth2整合(并用mysql数据库实现持久化客户端数据 <a href="https://blog.csdn.net/Victor_An/article/details/81510874" target="_blank" rel="noopener">链接1</a></p><p>spring登录认证 与 token<br><a href="https://www.huangyunkun.com/2016/03/02/spring-security-form-to-token/" target="_blank" rel="noopener">链接1</a><br><a href="https://www.jianshu.com/p/19059060036b" target="_blank" rel="noopener">链接2</a><br><a href="https://www.jianshu.com/p/68779236aa23" target="_blank" rel="noopener">链接3</a><br><a href="https://www.cnblogs.com/xifengxiaoma/p/10043173.html" target="_blank" rel="noopener">链接4 个人觉得最详细</a><br>access_token 获取过程 <a href="https://www.cnblogs.com/lexiaofei/p/7152326.html?utm_source=itdadao&amp;utm_medium=referral" target="_blank" rel="noopener">链接1</a></p><p>access_token 更改返回 <a href="https://www.jianshu.com/p/d9a35facff6f" target="_blank" rel="noopener">链接1</a></p><p>oauth2数据库 表的说明 <a href="https://www.cnblogs.com/donglu/articles/10218348.html" target="_blank" rel="noopener">链接1</a><br><a href="https://www.bbsmax.com/A/qVdeeNmndP/" target="_blank" rel="noopener">链接2</a><br><a href="http://www.andaily.com/spring-oauth-server/db_table_description.html" target="_blank" rel="noopener">链接3</a></p><p>oauth2 授权过程说明 来自知乎<a href="https://www.zhihu.com/question/19781476" target="_blank" rel="noopener">链接1</a><br><a href="http://andaily.com/spring-oauth-server/db_table_description.html" target="_blank" rel="noopener">链接2</a></p><p>接口测试链接(备用)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">POST http://localhost:8082/oauth/token?grant_type=client_credentials&amp;client_id=curl_client&amp;client_secret=user</span><br><span class="line"></span><br><span class="line">GET http://localhost:8082/oauth/check_token?grant_type=client_credentials&amp;token=445d302d-4fa1-49c4-8800-617bd72dd1e9</span><br></pre></td></tr></table></figure><p>在直接使用JdbcClientDetailsService 直接查询数据时，出现变量为null<br>即在非controller 层使用 @AUtowired时，无法取得变量<br>使用 如下方法 解决  <a href="https://blog.csdn.net/u013294097/article/details/84192367" target="_blank" rel="noopener">链接</a></p><p>error</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data too long for oauth_code column &apos;authentication&apos;</span><br><span class="line">这是在oauth服务器中获取oauth_code时往数据库插入值时，发生的意外，在网上找到许多奇奇怪怪的方法，行不通，最后发现自己在数据库oauth建表是oauth_code 表 authentication 表项为 VARBINARY 而实际应该是 LONG VARBINARY</span><br></pre></td></tr></table></figure><p>2019-5-21</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">目前，打算借助oauth2 实现SSO ,利用client_credential 来识别不同系统或者应用，只不过比较困惑的是如何定义用户的权限(目前做demou先不考虑)</span><br></pre></td></tr></table></figure><p>2019-5-23<br>认证流程<br>1.系统A检测是否有token，没有跳转</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8082/oauth/authorize?client_id=test&amp;redirect_uri=http://127.0.0.1&amp;response_type=code&amp;scope=read</span><br></pre></td></tr></table></figure><p>2.填写用户名与密码（图片不对，待更换）<br><img src="https://github.com/walkdeadtobe/picture/raw/master/code_check_token.png" alt="登录_png"><br>3.返回相应code 到系统A，系统A根据code到授权服务器申请token（部分图片错误，待更改）</p><blockquote><p>获取code<br><img src="https://github.com/walkdeadtobe/picture/raw/master/code_check_token.png" alt="获取code_png"></p></blockquote><blockquote><p>根据code获取token<br><img src="https://github.com/walkdeadtobe/picture/raw/master/code_token.png" alt="获取token_png"></p></blockquote><p>4.系统检测到token后，需要到授权系统检测该token对应的用户权限</p><blockquote><p>获取token所对应用户权限<br><img src="https://github.com/walkdeadtobe/picture/raw/master/code_check_token.png" alt="检测token_png"></p></blockquote><p>2019-7-24<br>最近涉及到单点登陆系统记住用户所登陆的系统，下次访问默认登陆,经过思考可以在cookie里面添加tag字段,在接受登陆请求之后标志所登陆的系统,下次登陆时可以以此作为标志,此外应当保证登陆另外一个系统时，字段值更改(js),这就需要后端向前端传值,由于sprig boot里传递的是modelandview 所以不采用在url链接链接里附上参数的方法，转而 controller层通过Model对象传值到对应的返回页面，返回页面获得相应的参数来做处理;<br>前端页面我 使用 thymeleaf模板引擎 渲染,其也有相应的方法取值<br>后端：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(&quot;/login&quot;)</span><br><span class="line">    public ModelAndView loginPage(HttpServletRequest request, HttpServletResponse response) &#123;</span><br><span class="line">        RequestCache requestCache= new HttpSessionRequestCache();</span><br><span class="line">        SavedRequest savedrequest = requestCache.getRequest(request,response);</span><br><span class="line">        ModelAndView model = new ModelAndView(&quot;login&quot;);</span><br><span class="line">        model.addObject(&quot;from&quot;, &quot;all&quot;);</span><br><span class="line">       return model;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>前端：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">var s_from = [[$&#123;from&#125;]];</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;p  th:text=&quot;#&#123;from&#125;&quot;&gt;&lt;/p&gt;</span><br></pre></td></tr></table></figure><p>此外，由于需要获得服务启动时服务本身的端口号，需要配置读取 Application.yml 的配置信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># @ConfigurationProperties 注解依赖</span><br><span class="line">&lt;dependency&gt;  </span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;  </span><br><span class="line">    &lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt;  </span><br><span class="line">    &lt;optional&gt;true&lt;/optional&gt;  </span><br><span class="line">&lt;/dependency&gt;  </span><br><span class="line"></span><br><span class="line">#Application.yml 部分内容</span><br><span class="line">server:</span><br><span class="line">  port: 80</span><br><span class="line">  address: 0.0.0.0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 配置类</span><br><span class="line">package com.aak.configuration;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">@Component</span><br><span class="line">@ConfigurationProperties(prefix=&quot;server&quot;) //接收application.yml中的server下面的属性</span><br><span class="line">public class MyApplication &#123;</span><br><span class="line">    public String address;</span><br><span class="line">    public String port;</span><br><span class="line">    public String getUrl() &#123;</span><br><span class="line">        return address;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setUrl(String Url) &#123;</span><br><span class="line">        this.address = Url;</span><br><span class="line">    &#125;</span><br><span class="line">    public String getPort() &#123;</span><br><span class="line">        return port;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setPort(String port) &#123;</span><br><span class="line">        this.port = port;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#使用</span><br><span class="line">@Autowired</span><br><span class="line">private MyApplication myApplication ;</span><br><span class="line">String port=myApplication.getPort();</span><br><span class="line">log.info(&quot;port:&quot;+port);</span><br></pre></td></tr></table></figure><p>2019-8-5<br>spring security oauth2 authorization code模式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[Spring Security Oauth 相关配置默认实现](https://docs.spring.io/spring-security/oauth/apidocs/org/springframework/security/oauth2/provider/endpoint/package-summary.html),其中包含(后期重新排版)</span><br><span class="line">AuthorizationEndpoint:Implementation of the Authorization Endpoint from the OAuth2 specification.</span><br><span class="line">CheckTokenEndpoint:Controller which decodes access tokens for clients who are not able to do so (or where opaque token values are used).</span><br><span class="line">DefaultRedirectResolver:Default implementation for a redirect resolver.</span><br><span class="line">ExactMatchRedirectResolver:Strict implementation for a redirect resolver which requires an exact match between the registered and requested redirect_uri.</span><br><span class="line">FrameworkEndpointHandlerMapping:A handler mapping for framework endpoints (those annotated with @FrameworkEndpoint).</span><br><span class="line">TokenEndpoint:Endpoint for token requests as described in the OAuth2 spec.</span><br><span class="line">TokenEndpointAuthenticationFilter:An optional authentication filter for the TokenEndpoint.</span><br><span class="line">TokenKeyEndpoint:OAuth2 token services that produces JWT encoded token values.</span><br><span class="line">WhitelabelApprovalEndpoint:Controller for displaying the approval page for the authorization server.</span><br><span class="line">WhitelabelErrorEndpoint:Controller for displaying the error page for the authorization server.</span><br><span class="line"></span><br><span class="line">最近需要在单点登录系统中实现在登录完成之后.跳转回系统跳转登录的页面</span><br><span class="line">code 模式下, </span><br><span class="line">1.跳转 http://localhost:8080/oauth/authorize?client_id=test2&amp;redirect_uri=http://127.0.0.1/oauth/code&amp;response_type=code&amp;scope=read</span><br><span class="line">2.登录成功之后返回code即重定向至http://127.0.0.1/oauth/code?code=CODE</span><br><span class="line">3.http://127.0.0.1/oauth/code?code=CODE获取code,传至后端,后端由此可以根据code获取token以Set-Cookie的方式返回response到页面</span><br><span class="line"></span><br><span class="line">AuthorizationEndpoint 实现 /oauth/authorize 接口,[实现流程](https://www.cnblogs.com/xifengxiaoma/p/10043173.html)中首先检验相关信息正确,之后在code模式下会生成code,并跳转回 redirect_uri?code=CODE</span><br><span class="line">最初以为需要重写 [AuthorizationEndpoint 实现](http://www.javased.com/?source_dir=spring-security-oauth/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/AuthorizationEndpoint.java) 下面 /oauth/authorize 接口,使得最终重定向到redirect_uri后在链接中添加上跳转发生时来源的网址.经过调查没有找到重写 AuthorizationEndpoint 类的方法(spring security 没有提供接口,使得重写类覆盖默认类, 发生作用)</span><br><span class="line">后来发现 跳转时 是 由 window.location.href 实现的,但是无法像request请求一样 拥有 referer header ,即使能够重写 AuthorizationEndpoint 类,也不能从保存的请求中获取 相关header,只能在跳转链接中附上相关信息(暂时没有调研,是否可以在跳转的同时携带相关信息);</span><br><span class="line">问题在于 跳转回redirect_uri是在AuthorizationEndpoint 实现的,具体的地址已经配置好,而且没有找到相关的filter可以在这处理发生后拦截,进行相关逻辑处理,之后想到可以把 redirect_u redirect_uri 中,即redirect_uri=/oauth/code?back_to=原本处理code的地址</span><br><span class="line">以及可以在 跳转链接上 附上 window.location 信息(refer=window.location),然后在 login 中保存相关信息到 当前session,然后在接口中/oauth/code 接口实现中,提取出back_to和 code值,以及附上从session 获得的refer,返回,告知back_to获得token 后应当跳转的地址</span><br><span class="line">完整链接如下:</span><br><span class="line">window.location.href=&apos;http://localhost:8080/oauth/authorize?client_id=test2&amp;redirect_uri=/oauth/code?back_to=http://127.0.0.1/oauth/code&amp;response_type=code&amp;scope=read&amp;refer=&apos;+window.location</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>watch_dog</title>
      <link href="/2019/05/21/watch_dog/"/>
      <url>/2019/05/21/watch_dog/</url>
      
        <content type="html"><![CDATA[<p>由于需要某些程序一直运行，或者能够自动重启，由此接触到看门狗程序这一概念</p>]]></content>
      
      
      
        <tags>
            
            <tag> script </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring security 和 oauth 认证中涉及的环节</title>
      <link href="/2019/05/15/spring%20security%20%E5%92%8C%20oauth%20%E8%AE%A4%E8%AF%81%E4%B8%AD%E6%B6%89%E5%8F%8A%E7%9A%84%E7%8E%AF%E8%8A%82/"/>
      <url>/2019/05/15/spring%20security%20%E5%92%8C%20oauth%20%E8%AE%A4%E8%AF%81%E4%B8%AD%E6%B6%89%E5%8F%8A%E7%9A%84%E7%8E%AF%E8%8A%82/</url>
      
        <content type="html"><![CDATA[<p>spring security 和 oauth 认证中涉及的环节<br>‘’’<br>UsernamePasswordAuthenticationToken继承AbstractAuthenticationToken实现Authentication<br>所以当在页面中输入用户名和密码之后首先会进入到UsernamePasswordAuthenticationToken验证(Authentication)，<br>然后生成的Authentication会被交由AuthenticationManager来进行管理<br>而AuthenticationManager管理一系列的AuthenticationProvider，<br>而每一个Provider都会通UserDetailsService和UserDetail来返回一个<br>以UsernamePasswordAuthenticationToken实现的带用户名和密码以及权限的Authentication<br>url= <a href="https://www.cnblogs.com/softidea/p/6716807.html" target="_blank" rel="noopener">https://www.cnblogs.com/softidea/p/6716807.html</a><br>‘’’</p>]]></content>
      
      
      
        <tags>
            
            <tag> oauth + spring security </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>运维</title>
      <link href="/2019/05/15/%E8%BF%90%E7%BB%B4/"/>
      <url>/2019/05/15/%E8%BF%90%E7%BB%B4/</url>
      
        <content type="html"><![CDATA[<p>为了测试整个系统的稳定性，写了一个脚本，模仿整个登录过程，中间出错就报错<br>了解到一个好工具 selenium<br><a href="https://blog.csdn.net/wkb342814892/article/details/81591394" target="_blank" rel="noopener">如何在centos上安装使用selenium-1</a><br><a href="https://www.bbsmax.com/A/A2dmRBKWze/" target="_blank" rel="noopener">如何在centos上安装使用selenium-2</a></p><p>为了更为精确的监控网页，考虑使用selenium模拟打开每个页面去检查其中网络请求是否正常获得，最终的目标是获取类似chrome开发者模式中Network中的效果，但是经调查发现，selenium中没有对这部分进行实现(或者与其最初目标无关，不考虑实现)，找到的可行的方案是使用 selenium + browsermob-proxy,<br><a href="https://browsermob-proxy-py.readthedocs.io/en/latest/" target="_blank" rel="noopener">browsermob-proxy 官方文档</a><br><a href="https://github.com/webmetrics/browsermob-proxy/downloads" target="_blank" rel="noopener">browsermob-proxy 下载</a></p><p><a href="https://stackoverflow.com/questions/48979520/chrome-headless-proxy-server" target="_blank" rel="noopener">示例代码</a></p><p>记录下中间遇到的问题：</p><blockquote><ol><li>端口冲突，报错</li></ol></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;use_for_temporary.py&quot;, line 160, in &lt;module&gt;</span><br><span class="line">    selenium_example()</span><br><span class="line">  File &quot;use_for_temporary.py&quot;, line 81, in selenium_example</span><br><span class="line">    proxy=server.create_proxy()</span><br><span class="line">  File &quot;/root/anaconda3/lib/python3.7/site-packages/browsermobproxy/server.py&quot;, line 40, in create_proxy</span><br><span class="line">    client = Client(self.url[7:], params)</span><br><span class="line">  File &quot;/root/anaconda3/lib/python3.7/site-packages/browsermobproxy/client.py&quot;, line 38, in __init__</span><br><span class="line">    self.port = jcontent[&apos;port&apos;]</span><br><span class="line">KeyError: &apos;port&apos;</span><br></pre></td></tr></table></figure><p>经过查看源码，大约猜测是网络端口的问题(后来发现在产生的server.log 中把问题说的很清楚 ( ╯□╰ ))，查看相关文档确定 browsermob-proxy 启动的端口默认是8080 <a href="https://cloud.tencent.com/developer/news/365789" target="_blank" rel="noopener">相关文档</a> ,而服务器中已经使用的端口包括这个，考虑更改其启动的配置参数，按照上述文档的方法下修改，无效报错，经过查看与browsermob-proxy 版本对应 的官方文档<a href="https://browsermob-proxy-py.readthedocs.io/en/latest/server.html" target="_blank" rel="noopener">Server 初始化</a> 以及相应解析源码，重新修改配置<br>为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server=Server(&quot;/root/download/browsermob-proxy-2.0-beta-6/bin/browsermob-proxy&quot;,&#123;&quot;host&quot;:&quot;localhost&quot;,&quot;port&quot;:9000&#125;)</span><br></pre></td></tr></table></figure><p>成功</p><blockquote><ol start="2"><li>文件引用问题</li></ol></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;use_for_temporary.py&quot;, line 159, in &lt;module&gt;</span><br><span class="line">    selenium_example()</span><br><span class="line">  File &quot;use_for_temporary.py&quot;, line 79, in selenium_example</span><br><span class="line">    server.start()</span><br><span class="line">  File &quot;/root/anaconda3/lib/python3.7/site-packages/browsermobproxy/server.py&quot;, line 122, in start</span><br><span class="line">    raise ProxyServerError(message)</span><br><span class="line">browsermobproxy.exceptions.ProxyServerError: The Browsermob-Proxy server process failed to start. Check &lt;_io.TextIOWrapper name=&apos;/root/py_auto/Gateway_auto/server.log&apos; mode=&apos;w&apos; encoding=&apos;UTF-8&apos;&gt;for a helpful error message.</span><br><span class="line"># server.log</span><br><span class="line">错误: 找不到或无法加载主类 org.browsermob.proxy.Main</span><br></pre></td></tr></table></figure><p>原因：我将browsermob-proxy解压后，将其中bin目录下browsermobproxy专门提取出来，放在一个专门目录下(以为是可执行文件)，引用之，后来发现它和windows下使用的browsermobproxy.bat 一样都是个脚本文件，需要在项目的固定位置<br>解决：将引用目录指向目录文件下的browsermobproxy</p><blockquote><ol start="3"><li>工具版本适配问题</li></ol></blockquote><p>问题：使用browsermob-proxy +selenium 时候，出现网络请求异常，在查看browsermob-proxy 产生的har记录文件时发现某些网路请求异常，返回-999(no response)或者0,不是正常的返回，但是单独用requests 模块去做请求时，又没有问题，于是考虑是因为webdriver结束过早，考虑过强制sleep,以及 driver.implict_wait(),但是都起不到作用，或者不够明显。<br>后来思考了下，我想要做的事情是判断页面是否加载正常，静态数据大多没有太多问题，主要是动态数据，即我所关注或者担心的大部属分请求都是ajax异步请求，前面那些方法可能没有太多作用，于是查找是否有有相关手段使selenium 等待所有ajax请求结束，其中提到了selenium的三种等待方式：强制等待(sleep等方法)，隐式等待(driver.implict_wait(),全局效果)，显式等待(在一定时间内等待某一元素的出现)<br>最终采取的是第三种方法，</p><blockquote><p>WebDriverWait(driver, 30).until(lambda s: s.execute_script(“return jQuery.active == 0”))</p></blockquote><p>参考<a href="https://www.cnblogs.com/aoyede/articles/5804184.html" target="_blank" rel="noopener">博客</a></p><p>但是在centos服务器上加上这行代码会出现<br>jQuery/$(如果使用 $.active)  no defined<br>最开始考虑类似与之前的方法，是因为这段脚本在jQuery加载之前执行引起的错误，后来尝试过强制等待后添加这行代码，无论等待多长时间都没有效果 ,开始怀疑是因为服务器环境的特殊性，于是在window笔记本,ubuntu台式机上尝试都没有异常，然后开始怀疑是环境配置的问题，其中包含的环境配置主要有selenium ,chromdriver,google-chrome,browsermob-proxy<br>由于selenium都是用pip安装的最新的，不考虑<br>然后发现centos服务器上的google-chrome是最新版76.0.3809.12   ,而windows上是75.0.3770.8，ubuntu上chromium是 v74.0.3729.6然后依据windowsde 配置调整了chromdriver,google-chrome的配置，但是仍然没有效果，最后发现centos 上的browsermob-proxy 是2.0-beta版本，而其他两个是2.14版本，最后调整之后，发现运行没有问题(暂时弄不明白为什么)<br>记录下正确的版本配置：<br>selenium: 3.141.0<br>chromdriver:75.0.3770.90<br>google-chrome: 75.0.3770.142<br>browsermob-proxy:2.1.4</p><blockquote><p>日志增长的问题</p></blockquote><p>考虑到网关日志增长过大的可能性，考虑到使用脚本定期定量切割日志,重命名，创建新文件，后来发现linux系统中有现成工具 logrotate 可以对日志进行切割，里面的配置完全可以满足个人需求<br>可以使用 man  logrotate 查看配置信息 或者  <a href="https://linux.die.net/man/8/logrotate" target="_blank" rel="noopener">logrotate Linxu 官网档案</a></p><blockquote><p>个人配置</p></blockquote><pre><code>位置：/etc/logrotate.d/kong<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/kong/logs/access.log &#123;</span><br><span class="line">    missingok</span><br><span class="line">    rotate 200</span><br><span class="line">    size 10M</span><br><span class="line">    compress</span><br><span class="line">    delaycompress</span><br><span class="line">    notifempty</span><br><span class="line">    create 644 root root</span><br><span class="line">    dateext</span><br><span class="line">    sharedscripts</span><br><span class="line">    postrotate</span><br><span class="line">            if [ -f /var/run/nginx.pid ]; then</span><br><span class="line">                    kill -USR1 `cat /usr/local/kong/pids/nginx.pid`</span><br><span class="line"></span><br><span class="line">            fi</span><br><span class="line">    endscript</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><p>原本为 cat /var/run/nginx.pid 后来发现,kong的pid信息存放在/usr/local/kong/pids/nginx.pid<br>kill -USR1 在这里指重新加载配置信息，重新建立对日志文件的连接<br>详情 man kill/kill -l 或者查看 <a href="http://www.man7.org/linux/man-pages/man2/kill.2.html" target="_blank" rel="noopener">Linux kill 文档</a>  [Linux  signal 文档](<a href="http://www.man7.org/linux/man-pages/man7/signal.7.html" target="_blank" rel="noopener">http://www.man7.org/linux/man-pages/man7/signal.7.html</a></p><p>包装 elastisearch API接口，简化经网关转发提供给外部使用<a href="https://www.elastic.co/guide/en/elasticsearch/reference/6.0/index.html" target="_blank" rel="noopener">Elastisearch 官网开放API 文档</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">获取某一时间 ddj 服务的访问次数</span><br><span class="line">GET /_count</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;: &#123;</span><br><span class="line">      &quot;bool&quot;:&#123;</span><br><span class="line">      &quot;filter&quot;: &#123;</span><br><span class="line">                &quot;range&quot;: &#123;</span><br><span class="line">                  &quot;@timestamp&quot;: &#123;</span><br><span class="line">                    &quot;gte&quot;: &quot;now-100h/h&quot;,</span><br><span class="line">                    &quot;lte&quot;: &quot;now/h&quot;,</span><br><span class="line">                    &quot;format&quot;: &quot;epoch_millis&quot;</span><br><span class="line">                  &#125;</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            ,</span><br><span class="line">        &quot;must&quot;: &#123;</span><br><span class="line">                &quot;match&quot;: &#123;</span><br><span class="line">                  &quot;request&quot;: &#123;</span><br><span class="line">                    &quot;query&quot;: &quot;*ddj*&quot;</span><br><span class="line">                  &#125;</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">获取某一时间 ddj 服务的访问信息，相比于上者更为详细</span><br><span class="line">GET /_search</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;: &#123;</span><br><span class="line">      &quot;bool&quot;:&#123;</span><br><span class="line">      &quot;filter&quot;: &#123;</span><br><span class="line">                &quot;range&quot;: &#123;</span><br><span class="line">                  &quot;@timestamp&quot;: &#123;</span><br><span class="line">                    &quot;gte&quot;: &quot;now-100h/h&quot;,</span><br><span class="line">                    &quot;lte&quot;: &quot;now/h&quot;,</span><br><span class="line">                    &quot;format&quot;: &quot;epoch_millis&quot;</span><br><span class="line">                  &#125;</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            ,</span><br><span class="line">        &quot;must&quot;: &#123;</span><br><span class="line">                &quot;match&quot;: &#123;</span><br><span class="line">                  &quot;request&quot;: &#123;</span><br><span class="line">                    &quot;query&quot;: &quot;*ddj*&quot;</span><br><span class="line">                  &#125;</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,&quot;aggs&quot;: &#123;</span><br><span class="line">            &quot;dateAgg&quot;: &#123;</span><br><span class="line">              &quot;date_histogram&quot;: &#123;</span><br><span class="line">                &quot;field&quot;: &quot;@timestamp&quot;,</span><br><span class="line">                &quot;time_zone&quot;: &quot;Europe/Amsterdam&quot;,</span><br><span class="line">                &quot;interval&quot;: &quot;1m&quot;,</span><br><span class="line">                &quot;min_doc_count&quot;: 1</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本来想自己开发一个插件，似乎<a href="https://docs.konghq.com/hub/" target="_blank" rel="noopener">Kong Hub</a>上提供的第三方插件 <a href="https://docs.konghq.com/hub/stone-payments/kong-plugin-template-transformer/" target="_blank" rel="noopener">Template Transformer</a> 可以满足需要，<a href="https://github.com/stone-payments/kong-plugin-template-transformer" target="_blank" rel="noopener">源码</a>可以观摩下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST http://localhost:8001/routes/4f240596-9f55-4b90-a2be-2329be72391e/plugins --data &quot;name=kong-plugin-template-transformer&quot;   --data &quot;config.request_template=&apos; &#123;</span><br><span class="line">    &quot;query&quot;: &#123;</span><br><span class="line">      &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;filter&quot;: &#123;</span><br><span class="line">                &quot;range&quot;: &#123;</span><br><span class="line">                  &quot;@timestamp&quot;: &#123;</span><br><span class="line">                    &quot;gte&quot;: &quot;now-&#123;&#123;headers.gt&#125;&#125;h/h&quot;,</span><br><span class="line">                    &quot;lte&quot;: &quot;now/h&quot;,</span><br><span class="line">                    &quot;format&quot;: &quot;epoch_millis&quot;</span><br><span class="line">                  &#125;</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            ,</span><br><span class="line">        &quot;must&quot;: &#123;</span><br><span class="line">                &quot;match&quot;: &#123;</span><br><span class="line">                  &quot;request&quot;: &#123;</span><br><span class="line">                    &quot;query&quot;: &quot;*&#123;&#123;headers.department&#125;&#125;*&quot;</span><br><span class="line">                  &#125;</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;&quot;</span><br><span class="line">&#123;&quot;query&quot;:&#123;&quot;bool&quot;:&#123;&quot;filter&quot;: &#123;&quot;range&quot;: &#123;&quot;@timestamp&quot;:&#123;&quot;gte&quot;: &quot;now-&#123;&#123;headers.gt&#125;&#125;h/h&quot;,&quot;lte&quot;: &quot;now/h&quot;,&quot;format&quot;: &quot;epoch_millis&quot;&#125;&#125;&#125;&#125;&#125;,&quot;size&quot;:0,&quot;aggs&quot;:&#123;&quot;test&quot;:&#123;&quot;terms&quot;:&#123; &quot;field&quot;: &quot;user.keyword&quot;,&quot;size&quot;:&#123;&#123;headers.size&#125;&#125;&#125;&#125;&#125;&#125;&quot;</span><br><span class="line">/api/v1/data/es/list_user</span><br><span class="line">curl -X POST http://localhost:8001/routes/&#123;route&#125;/plugins --data &quot;name=kong-plugin-template-transformer&quot;   --data</span><br><span class="line">&quot;config.request_template=&#123;</span><br><span class="line">      \&quot;query\&quot;: &#123;</span><br><span class="line">        \&quot;bool\&quot;: &#123;</span><br><span class="line">          \&quot;filter\&quot;: &#123;</span><br><span class="line">            \&quot;range\&quot;: &#123;</span><br><span class="line">              \&quot;@timestamp\&quot;: &#123;</span><br><span class="line">                \&quot;gte\&quot;: \&quot;now-&#123;&#123;headers.gt&#125;&#125;h/h\&quot;,</span><br><span class="line">                \&quot;lte\&quot;: \&quot;now/h\&quot;,</span><br><span class="line">                \&quot;format\&quot;: \&quot;epoch_millis\&quot;</span><br><span class="line">                &#125;</span><br><span class="line">               &#125;</span><br><span class="line">              &#125;</span><br><span class="line">             &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">      \&quot;size\&quot;:0,  </span><br><span class="line">      \&quot;aggs\&quot;: &#123;</span><br><span class="line">        \&quot;test\&quot;:&#123;</span><br><span class="line">          \&quot;terms\&quot;:&#123; </span><br><span class="line">          \&quot;field\&quot;: \&quot;user.keyword\&quot;,</span><br><span class="line">          \&quot;size\&quot;:&#123;&#123;headers.size&#125;&#125;</span><br><span class="line">          &#125; </span><br><span class="line">         &#125;  </span><br><span class="line">        &#125;</span><br><span class="line">      &#125;&quot;</span><br><span class="line"></span><br><span class="line">/api\/v1\/data\/es\/history</span><br><span class="line">curl -X POST http://localhost:8001/routes/&#123;route&#125;/plugins --data &quot;name=kong-plugin-template-transformer&quot;   --data</span><br><span class="line">&quot;config.request_template=&#123;</span><br><span class="line">  \&quot;size\&quot;: &#123;&#123;headers.size&#125;&#125;,</span><br><span class="line">  \&quot;query\&quot;: &#123;</span><br><span class="line">    \&quot;bool\&quot;: &#123;</span><br><span class="line">      \&quot;must\&quot;: [</span><br><span class="line">        &#123; \&quot;match\&quot;: &#123;  \&quot;user\&quot;: \&quot;&#123;&#123;headers.name&#125;&#125;\&quot;  &#125; &#125;, </span><br><span class="line">        &#123; \&quot;match\&quot;: &#123; \&quot;_index\&quot;:\&quot;system-syslog*\&quot; &#125; &#125;]    </span><br><span class="line">        &#125;  </span><br><span class="line">      &#125;,</span><br><span class="line">  \&quot;_source\&quot;: &#123;</span><br><span class="line">    \&quot;includes\&quot;: [\&quot;@timestamp\&quot;,\&quot;referer\&quot;,\&quot;request\&quot;,\&quot;user\&quot;]</span><br><span class="line">    &#125;,  </span><br><span class="line">  \&quot;sort\&quot;: [</span><br><span class="line">    &#123;\&quot;@timestamp\&quot;:&#123;\&quot;order\&quot;:\&quot;desc\&quot; ,\&quot;unmapped_type\&quot;:\&quot;date\&quot; &#125; &#125;,    </span><br><span class="line">    &#123;\&quot;_score\&quot;:&#123;\&quot;order\&quot;:\&quot;asc\&quot; &#125; &#125;  </span><br><span class="line">    ]</span><br><span class="line">    &#125;&quot;</span><br></pre></td></tr></table></figure><p>2019-9-24  更改为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">curl -i -X POST   --url http://localhost:8001/services/-search/routes  --data &apos;paths=/api/v1/data/es/history&apos;</span><br><span class="line">curl -X POST http://localhost:8001/routes/&#123;route_id&#125;/plugins --data &quot;name=kong-plugin-template-transformer&quot;   --data &quot;config.request_template=&#123;</span><br><span class="line">    \&quot;query\&quot;: &#123;</span><br><span class="line">      \&quot;bool\&quot;: &#123;</span><br><span class="line">      \&quot;filter\&quot;: &#123;</span><br><span class="line">                \&quot;range\&quot;: &#123;</span><br><span class="line">                  \&quot;@timestamp\&quot;: &#123;</span><br><span class="line">                    \&quot;gte\&quot;: \&quot;now-&#123;&#123;headers.gt&#125;&#125;h/h\&quot;,</span><br><span class="line">                    \&quot;lte\&quot;: \&quot;now/h\&quot;,</span><br><span class="line">                    \&quot;format\&quot;: \&quot;epoch_millis\&quot;</span><br><span class="line">                  &#125;</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            ,</span><br><span class="line">        \&quot;must\&quot;: &#123;</span><br><span class="line">                \&quot;match\&quot;: &#123;</span><br><span class="line">                  \&quot;request\&quot;: &#123;</span><br><span class="line">                    \&quot;query\&quot;: \&quot;*&#123;&#123;headers.department&#125;&#125;*\&quot;</span><br><span class="line">                  &#125;</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;&quot;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">curl -i -X POST   --url http://localhost:8001/services/-search/routes  --data &apos;paths=/api/v1/data/es/history&apos;</span><br><span class="line">&#123;</span><br><span class="line">  \&quot;size\&quot;: &#123;&#123;headers.size&#125;&#125;,</span><br><span class="line">  \&quot;query\&quot;: &#123;</span><br><span class="line">   \&quot;bool\&quot;: &#123;</span><br><span class="line">      \&quot;must\&quot;: [</span><br><span class="line">        &#123; \&quot;match\&quot;: &#123;  \&quot;user\&quot;: \&quot;&#123;&#123;headers.name&#125;&#125;\&quot;  &#125; &#125;,</span><br><span class="line">        &#123; \&quot;match\&quot;: &#123; \&quot;_index\&quot;:\&quot;system-syslog*\&quot; &#125; &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  \&quot;_source\&quot;: &#123;</span><br><span class="line">    \&quot;includes\&quot;: [</span><br><span class="line">     \&quot;@timestamp\&quot;,</span><br><span class="line">      \&quot;referer\&quot;,</span><br><span class="line">      \&quot;request\&quot;,</span><br><span class="line">      \&quot;user\&quot;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  \&quot;sort\&quot;: [</span><br><span class="line">    &#123;\&quot;@timestamp\&quot;:&#123;\&quot;order\&quot;:\&quot;desc\&quot; ,\&quot;unmapped_type\&quot;:\&quot;date\&quot; &#125; &#125;,</span><br><span class="line">    &#123;\&quot;_score\&quot;:&#123;\&quot;order\&quot;:\&quot;asc\&quot; &#125; &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">curl -i -X POST   --url http://localhost:8001/services/-search/routes  --data &apos;paths=/api/v1/data/es/list_user&apos;</span><br><span class="line">curl -X POST http://localhost:8001/routes/ad0226f7-0877-4557-b81b-f30cd227cf61/plugins --data &quot;name=kong-plugin-template-transformer&quot;   --data &quot;config.request_template=&#123;</span><br><span class="line">    \&quot;query\&quot;: &#123;</span><br><span class="line">      \&quot;bool\&quot;: &#123;</span><br><span class="line">      \&quot;filter\&quot;: &#123;</span><br><span class="line">                \&quot;range\&quot;: &#123;</span><br><span class="line">                  \&quot;@timestamp\&quot;: &#123;</span><br><span class="line">                    \&quot;gte\&quot;: \&quot;now-&#123;&#123;headers.gt&#125;&#125;h/h\&quot;,</span><br><span class="line">                    \&quot;lte\&quot;: \&quot;now/h\&quot;,</span><br><span class="line">                    \&quot;format\&quot;: \&quot;epoch_millis\&quot;</span><br><span class="line">                  &#125;</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">  \&quot;size\&quot;:0,</span><br><span class="line">  \&quot;aggs\&quot;: &#123;</span><br><span class="line">    \&quot;test\&quot;: &#123;</span><br><span class="line">      \&quot;terms\&quot;: &#123;</span><br><span class="line">        \&quot;field\&quot;: \&quot;user.keyword\&quot;,</span><br><span class="line">        \&quot;size\&quot;:&#123;&#123;headers.size&#125;&#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;&quot;</span><br></pre></td></tr></table></figure><p>luarocks make<br>luarocks pack kong-plugin-myplugin 0.1.0-1<br>luarocks install kong-plugin-myplugin-0.1.0-1.all.rock<br>kong restart</p>]]></content>
      
      
      
        <tags>
            
            <tag> python,爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>authen_server</title>
      <link href="/2019/05/14/authen-server/"/>
      <url>/2019/05/14/authen-server/</url>
      
        <content type="html"><![CDATA[<p>2019-5-14 尝试将spring oauth server安装到 实验室服务器上（虽然是初版），做一下记录<br>如何用idea 打包 maven项目<br>‘’’<br>用idea中maven 打开项目，点击idea 右侧的 Maven Projects，<br>点击 LIfecycle -&gt; install -&gt; run maven build 即可<br>‘’’<br>之后 将该项目scp至服务器<br>使用 java -jar *.jar 运行<br>在运行时出现一些错误，如下</p><p>‘’’<br>2019-05-14 17:06:35.986 ERROR 1180706 — [ost-startStop-1] com.zaxxer.hikari.pool.HikariPool        : HikariPool-1 - Exception during pool initialization.</p><p>com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure</p><p>The last packet successfully received from the server was 199 milliseconds ago.  The last packet sent successfully to the server was 192 milliseconds ago.<br>at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) ~[na:1.8.0_181]<br>at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62) ~[na:1.8.0_181]<br>…<br>…<br>… 154 common frames omitted<br>Caused by: java.security.cert.CertPathValidatorException: Path does not chain with any of the trust anchors<br>at sun.security.provider.certpath.PKIXCertPathValidator.validate(PKIXCertPathValidator.java:154) ~[na:1.8.0_181]<br>at sun.security.provider.certpath.PKIXCertPathValidator.engineValidate(PKIXCertPathValidator.java:80) ~[na:1.8.0_181]<br>at java.security.cert.CertPathValidator.validate(CertPathValidator.java:292) ~[na:1.8.0_181]<br>at com.mysql.jdbc.ExportControlled$X509TrustManagerWrapper.checkServerTrusted(ExportControlled.java:295) ~[mysql-connector-java-5.1.46.jar!/:5.1.46]<br>… 156 common frames omitted</p><p>‘’’<br>经查询(<a href="https://www.jianshu.com/p/b3151ca89def" target="_blank" rel="noopener">https://www.jianshu.com/p/b3151ca89def</a> ）发现是因为SSL配置的原因（暂时没有细究），在源代码 application.yml 文件中将useSSL=true 改为 false即可，重新打包，scp，运行</p><p>在查询过程中发现之后可能会出现的另一个问题，即在长时间未连接mysql时会报类似的 Communications link failure 错误，不过这里是因为mysql默认配置 无连接最长等待时间是8小时，可以通过修改配置文件 mysql.ini 去解决这个错误</p><p>在此之前需要在服务器安装mysql<br>按照官网教程(下面的是Ubuntu下的，如果安装在redhat上，会有一些区别 ，具体参照官方教程 <a href="https://dev.mysql.com/doc/mysql-yum-repo-quick-guide/en/" target="_blank" rel="noopener">https://dev.mysql.com/doc/mysql-yum-repo-quick-guide/en/</a>)</p><ul><li>wget <a href="https://dev.mysql.com/get/mysql-apt-config_0.8.13-1_all.deb" target="_blank" rel="noopener">https://dev.mysql.com/get/mysql-apt-config_0.8.13-1_all.deb</a></li><li>也可以选择检查 文件传输中是否出错 md5sum mysql-apt-config_0.8.13-1_all.deb</li><li>之后运行 dpkg -i mysql-apt-config_0.8.13-1_all.deb，选择你所需要安装的mysql版本，程序会将之添加到apt源中</li><li>运行 sudo apt-get update （–fix-missing）</li><li>自动下载之后需要配置用户名与密码，需要与你在spring程序中配置的一致</li></ul><p>进入数据库 mysql -u root -p ,之后输入密码</p>]]></content>
      
      
      
        <tags>
            
            <tag> oauth </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Machine_learning_course</title>
      <link href="/2019/05/01/Machine_learning_course/"/>
      <url>/2019/05/01/Machine_learning_course/</url>
      
        <content type="html"><![CDATA[<p>2019-5-10<br>机器学习布置作业，6-15前交，内容未知<br>基于主成分分析方法的人脸识别方法</p><ul><li>之前是寻找空间特征，某一局部点</li><li>人脸识别的核心问题是提取特征(人脸的相关性打，冗余信息多？如何去除：主成分分析，如何将一个矩阵变成一个向量)</li><li>PCA方法的优缺点：从压缩能量的角度，PCA是最有效率的，可以用于维度压缩</li><li>PCA  FisherDiscriminant analysis or LDA</li><li>kErnel PCA</li><li>KFDA</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> ML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NLP</title>
      <link href="/2019/04/28/NLP/"/>
      <url>/2019/04/28/NLP/</url>
      
        <content type="html"><![CDATA[<p>2019-4-28 周日下午<br>NLP aligment</p>]]></content>
      
      
      
        <tags>
            
            <tag> 自然语言处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>人脸识别</title>
      <link href="/2019/04/27/%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/"/>
      <url>/2019/04/27/%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p>PCA方法学习：解释得比较清楚<br><a href="https://blog.csdn.net/qq_32865355/article/details/80809835" target="_blank" rel="noopener">https://blog.csdn.net/qq_32865355/article/details/80809835</a></p><p>github 开源方案<br><a href="https://github.com/ahhda/Face-Recogntion" target="_blank" rel="noopener">https://github.com/ahhda/Face-Recogntion</a><br><a href="https://github.com/ageitgey/face_recognition" target="_blank" rel="noopener">https://github.com/ageitgey/face_recognition</a></p><p>相关论文<br><a href="https://blog.csdn.net/tMb8Z9Vdm66wH68VX1/article/details/83155487" target="_blank" rel="noopener">https://blog.csdn.net/tMb8Z9Vdm66wH68VX1/article/details/83155487</a></p><p>CNN 实现 人脸识别<br><a href="https://blog.csdn.net/u012162613/article/details/43277187" target="_blank" rel="noopener">https://blog.csdn.net/u012162613/article/details/43277187</a><br><a href="https://blog.csdn.net/zouxy09/article/details/8781543" target="_blank" rel="noopener">https://blog.csdn.net/zouxy09/article/details/8781543</a></p><p>相关github 代码<br><a href="https://github.com/wepe/MachineLearning" target="_blank" rel="noopener">https://github.com/wepe/MachineLearning</a></p><p>faceCascade.detectMultiScale 从图像中找出人脸<br>theano.shared可以看作是将变量设置为全局变量，其值可以在多个函数中共用<br>theano.tensor.dot(X, Y) 简单的看做XY 矩阵相乘 或者说 内积<br>maxpooling 、average_pooling ？？</p><p>tensor库函数解释<br><a href="http://deeplearning.net/software/theano/library/tensor/basic.html" target="_blank" rel="noopener">http://deeplearning.net/software/theano/library/tensor/basic.html</a></p><p>损失函数的分类（交叉熵） <a href="https://www.jianshu.com/p/47172eb86b39" target="_blank" rel="noopener">https://www.jianshu.com/p/47172eb86b39</a></p><p>神经网络 数学公式 表达 <a href="https://blog.csdn.net/sinat_35821976/article/details/80615612" target="_blank" rel="noopener">https://blog.csdn.net/sinat_35821976/article/details/80615612</a></p><p>分类器用的是softmax  <a href="https://www.cnblogs.com/python-frog/p/9380290.html" target="_blank" rel="noopener">https://www.cnblogs.com/python-frog/p/9380290.html</a><br>，LeNet5用的是rbf？？</p>]]></content>
      
      
      
        <tags>
            
            <tag> 模式识别 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>决策树</title>
      <link href="/2019/04/27/%E5%86%B3%E7%AD%96%E6%A0%91/"/>
      <url>/2019/04/27/%E5%86%B3%E7%AD%96%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<p>今天上课提及了决策树，随机森林，Dropout，Deepforest(周志华)<br>目前而言，决策树指对于一个集合，依此以某种确定特征作为分类标准，从而将该集合分为若干类(每个节点都代表一个分类或者一种决策标准)<br>随机森林，指在每个节点，随机选择某个特征从而构建一个线性分类器，将样本分为几部分</p><p>Boosted Cascades VS 随机森林<br>前者是一个不平衡的树，适合不均匀的分类问题</p>]]></content>
      
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>slice_window</title>
      <link href="/2019/04/23/slide_window/"/>
      <url>/2019/04/23/slide_window/</url>
      
        <content type="html"><![CDATA[<p>返回滑动窗口的最大值(考虑极端情况起码考虑 空 )<br>给定一个输入序列（数组)，返回窗口范围内的最大值，每次移动一次窗口，并返回一个最大值</p><ul><li>方法1：大顶堆（MaxHeap）  删除离开的元素，加入新的元素，排序  时间复杂度<br>$$ N log^{k} $$</li><li>deque(双端 Queue)</li><li>–入队列</li><li>–维护队列：对于长度为K 的窗口，将窗口范围内最大值之前的数全部删除（忽略），因为在最大值之前的数必然不会成为最大值</li></ul><ul>  <li>JavaScript    <ol>      <li>        第一章        <ul>          <li>const</li>          <li>let</li>        </ul>      </li>      <li>        第二章sdisjfosdklsjfkdddddldddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd        <ul>          <li>function</li>          <li>object</li>        </ul>      </li>    </ol>  </li>  <li>Java    <ol>      <li>        第一章        <ul>          <li>class</li>          <li>package</li>        </ul>      </li>      <li>        第二章        <ul>          <li>private</li>          <li>public</li>        </ul>      </li>    </ol>  </li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>map_and_set</title>
      <link href="/2019/04/23/map_and_set/"/>
      <url>/2019/04/23/map_and_set/</url>
      
        <content type="html"><![CDATA[<p>哈希函数，哈希表，哈希碰撞(单个节点变成链表来解决：拉链法)<br>List VS Map VS Set</p><ul><li>List：由数组或者链表实现，插入O(1)，查找O(N)，可重复</li><li>Map ：键值对Key-value</li><li>Set :用哈希表或者二叉树实现；相对于List不允许重复</li></ul><p>HashMap VS TreeMap<br>HashSet VS TreeSet<br>在查询时，哈希表实现 O(1) ，Tree实现 O(log_{n})<br>但是 哈希表的实现是无序的，而树的实现是有序的</p><p>题目：242（Leetcode） Valid Anagrant<br>题意：对给定的两个字符串，判断是否是同一单词的错位变换</p><ul><li>方法1：给两个字符串排序，判断是否相同 算法复杂度 ：<br>$$ O(Nlog^N) $$</li><li>方法2：构造Map，比较Map是否相同算法复杂度<br>$$ O(N) $$</li></ul><p>题目：Two Sum(Three Sum)<br>题意：给定一个数组，以及value，输出数组中和为value的元素下标</p><ul><li>方法1：暴力方法时间复杂度<br>$$<br>O(N^2)<br>$$</li><li>方法2：Set;对于数组的任意元素x，如果元素 value-x 存在，则输出 时间复杂度<br>$$<br>O(N)<br>$$</li></ul><p>那么对于ThreeSum</p><ul><li>方法1：暴力 时间复杂度<br>$$<br>O(N^3)<br>$$</li><li>方法2：枚举a+b,在Set里查询c 时间复杂度<br>$$<br>O(N^2)<br>$$</li><li>方法3：首先排序，枚举a,在剩下的子数组中，b和c各位于最左和最右，根据a+b+c&gt;0/&lt;0 ,来判断移动b或者c 虽然空间复杂度是常数级别的，但修改了原数组 ，时间复杂度<br>$$<br>O(N^2)<br>$$</li><li>方法4：应用ThreeSum的方法,递归(4=1+3;3=1+2) 时间复杂度<br>$$<br>O(N^2)<br>$$</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小技巧总结</title>
      <link href="/2019/04/22/%E5%B0%8F%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93/"/>
      <url>/2019/04/22/%E5%B0%8F%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>1.git commit 由于没有添加 -m 而进入 vim界面，无法退出，在一个博文找到方法（<a href="https://blog.csdn.net/weixin_42197191/article/details/87015837%EF%BC%89" target="_blank" rel="noopener">https://blog.csdn.net/weixin_42197191/article/details/87015837）</a><br>Ctrl + v + 命令键 实现命令</p><p>2.由于两个电脑同时修改自己的blog markdown文件，导致文件有差异，如何解决，暂时没有找到思路，将某一个电脑的master回退，会导致他的修改丢失（或者提前保存其修改，或许这就是多分支存在的理由）<br>git log 查看最近commit的记录<br>git reset --hard (HEAD～n)/(commit_id)   会退到当前(之前的n个提交记录)/(在git log 中的某个提交记录)<br>git push --force 将当前分支提交<br>it branch --set-upstream-to=<remote origin>/<remote branch> <local branch>  绑定当前本地分支与某个远程分支</local></remote></remote></p><ol start="3"><li>获得 包含某个字符串的进程ID 并且将之作为参数，删除相应进程<br>kill -9 $(ps -ef|grep id | grep -v grep|awk ‘{print $2}’ )。</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>manacher</title>
      <link href="/2019/04/22/manacher/"/>
      <url>/2019/04/22/manacher/</url>
      
        <content type="html"><![CDATA[<p>马拉车算法，解决最大回文串问题，有点意思，感觉有点像KMP算法</p>]]></content>
      
      
      
        <tags>
            
            <tag> algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代理</title>
      <link href="/2019/04/22/%E4%BB%A3%E7%90%86/"/>
      <url>/2019/04/22/%E4%BB%A3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>代理给通信带来更多的功能</p><ul><li>拦截：代理可以选择性拦截传输的网络流量，比如一些公司限制员工在上班的时候不能访问某些游戏或者电商网站，再比如把我们和世界隔离开来的 GFW，还有在数据中心中拒绝恶意访问的网关。</li><li>统计：既然所有的流量都经过代理，那么代理也可以用来统计网络中的数据信息，比如了解哪些人在访问哪些网站，通信的应答延迟等。</li><li>缓存：如果通信双方比较”远“，访问比较慢，那么代理可以把最近访问的数据缓存在本地，后面的访问不用访问后端来做到加速。CDN 就是这个功能的典型场景。</li><li>分发(负载均衡)：如果某个通信方有多个服务器后端，代理可以根据某些规则来选择如何把流量发送给多个服务器，也就是我们常说的负载均衡功能，比如著名的 Nginx 软件。</li><li>跳板：如果 A、B 双方因为某些原因不能直接访问，而代理可以和双方通信，那么通过代理，双方可以绕过原来的限制进行通信。VPN，内网穿透。</li><li>注入：既然代理可以看到流量，那么它也可以修改网络流量，可以自动在收到的流量中添加一些数据，比如有些宽带提供商的弹窗广告。</li></ul><p>ssr速度不行安装v2ray<br>参考<a href="https://www.stackcc.com/2019/04/02/v2raysetup/" target="_blank" rel="noopener">网站1</a><a href="https://tlanyan.me/v2ray-tutorial/" target="_blank" rel="noopener">网站2</a><br><a href="https://www.hijk.pw/v2rayn-config-tutorial/" target="_blank" rel="noopener">网站3</a></p><p><a href="https://www.v2rayssr.com/v2raynginx.html" target="_blank" rel="noopener">V2RAY+Nginx+Ws+Tls+Host+Path</a></p><ol><li>域名购买：<a href="https://dcc.godaddy.com/" target="_blank" rel="noopener">狗爹</a><br>[godaddy 域名解析]whetstone.xyz</li></ol><p>export CF_Token=“0gE0NDS31pewoA8ykVN2CqQXC_kKxcp5C2yp_ZNn”</p><p><a href="http://acme.sh" target="_blank" rel="noopener">acme.sh</a> --issue --dns dns_cf -d whetstone.xyz -d www.whetstone.xyz -k ec-256<br>cat ~/.acme.sh/whetstone.xyz_ecc/fullchain.cer &gt; /etc/nginx/ssl/whetstone.xyz.crt<br>cat ~/.acme.sh/whetstone.xyz_ecc/whetstone.xyz.key &gt; /etc/nginx/ssl/whetstone.xyz.key<br>systemctl start nginx<br><a href="http://acme.sh" target="_blank" rel="noopener">acme.sh</a> --installcert -d whetstone.xyz -d www.whetstone.xyz --fullchainpath /etc/nginx/ssl/whetstone.xyz.crt --keypath /etc/nginx/ssl/whetstone.xyz.key --ecc --reloadcmd “systemctl reload nginx”</p>]]></content>
      
      
      
        <tags>
            
            <tag> Microservice </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>注解</title>
      <link href="/2019/04/20/%E6%B3%A8%E8%A7%A3/"/>
      <url>/2019/04/20/%E6%B3%A8%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>@Bean<br>(@Set @Get)</p><p>@AutoWire<br>public class cla/public void set(class cla)</p><ul><li>自动装配即是，让spring自动满足bean依赖的一种方法，在满足依赖的过程中，会在spring的上下文中匹配某个bean需要的bean;@AutoWire可以注解方法或者变量</li></ul><p>@Component(“name”)</p><ul><li>目前的了解是，加上该注解，就无需告知spring为该类创建Bean;如果有括号，并将该Bean ID标识（命名）为里面的字符串</li></ul><p>@Name</p><ul><li>spring 支持其代替 @Component ，唔，但不了解</li></ul><p>@ComponentScan<br>@ComponentScan(“name”)<br>@ComponentScan(basePackages=“name”/{“name”,“name1”})</p><ol><li>注解:在spring里开启组件扫描，默认扫描与配置类相同的包，扫描所在包以及子包中所有带有@Component注解的类</li><li>注解:指明基础包，可以指明多个基础包</li></ol><p>@ContextConfiguration(classes=*.class)</p><ul><li>从指明的class里加载配置</li></ul><p>2019-6-27 更新<br>今天在给spring 添加新restful接口时，发现无法访问；最后发现，接口如果不设置访问方法。默认访问方式是GET，奇怪的是，如果设置为POST方式，那么将无法访问，重定位回登录页面？？</p><p>在学习微服务构建时，需要看java代码，看到注解 时十分迷惑，暂时没有自己的见解<br>但是 这边博客说的不错<br><a href="https://blog.csdn.net/briblue/article/details/73824058" target="_blank" rel="noopener">https://blog.csdn.net/briblue/article/details/73824058</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>stack+queue</title>
      <link href="/2019/04/15/stack-queue/"/>
      <url>/2019/04/15/stack-queue/</url>
      
        <content type="html"><![CDATA[<p>##stack：<br>先进后出；有压栈，出栈等操作<br>算法题：判断输入字符创是否符合规范，比如“【（）】”和“【（{”，利用栈去做比较好（需要存储正确对应的Map，比如 map={&quot;{&quot;:&quot;}&quot;}）,还可以选择重复循环消除“{}”、“（）”、“【】”等组合</p><p>##Queue：<br>先进先出；</p><p>如何用stack实现queue 以及如何使用Queue 实现stack<br>思路：负负得正；两个stack实现 Queue<br>利用两个栈的之间的元素的转移，实现元素顺序的反转</p><p>##Priority Queue<br>正常进入，按照优先级出<br>实现机制：Heap（二叉堆、多项式堆、斐波拉契堆）、二叉搜索树</p>]]></content>
      
      
      
        <tags>
            
            <tag> algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linked_list</title>
      <link href="/2019/04/12/linked-list/"/>
      <url>/2019/04/12/linked-list/</url>
      
        <content type="html"><![CDATA[<p>链表相关问题<br>双链表 反转<br>链表交换相邻元素<br>判断链表是否有环</p><ul><li>暴力遍历，如果陷入循环中，那么永远无法结束（设置时间1s即可）</li><li>利用多余的数据结构判断是否经过同一个节点</li><li>快慢指针</li></ul><p>$$  \frac{1}{1+sin(x)}   $$</p>]]></content>
      
      
      
        <tags>
            
            <tag> algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>island_count</title>
      <link href="/2019/04/11/island-count/"/>
      <url>/2019/04/11/island-count/</url>
      
        <content type="html"><![CDATA[<p>算法体：被河流围的若干岛屿分别用0和1表示，求岛屿个数以及可能的岛屿面积<br>第一种方法：染色（我更愿意理解为聚类删除）<br>即找到每一个1身边所有的1并将之删除（这符合岛屿的规定，即由1连在一起的集合），可以使用DFS或者BFS来进行删除<br>第二种方法：并查集<br>遍历数组，对于第一个遇到的1 ，将之作为队长，由此BFS/DFS建立 建立并查集，将同一个岛屿的1属于同一个集合；</p><p>应用：朋友圈</p>]]></content>
      
      
      
        <tags>
            
            <tag> algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bullon_filter</title>
      <link href="/2019/04/11/bullon-filter/"/>
      <url>/2019/04/11/bullon-filter/</url>
      
        <content type="html"><![CDATA[<p>极客时间<br>哈希函数：将key隐射到一维数组的特殊位置（很少有错）<br>即使有错也可以 采取二维数组，减小错误率<br>类似于 计算机组成原理 内存与cache映射 中 组相联（还有直接隐射，全相联）</p><p>布隆过滤器：将key分解为若干元素组成，比如说连续的二进制<br>每输入一个key，将相应二进制位赋值为1，由此可以简单的判断不在，但是不能确定是否在，需要进一步判断（比如到后面数据库再核实）</p>]]></content>
      
      
      
        <tags>
            
            <tag> algrithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nlp-2019-4-5</title>
      <link href="/2019/04/06/nlp-2019-4-5/"/>
      <url>/2019/04/06/nlp-2019-4-5/</url>
      
        <content type="html"><![CDATA[<p>隐藏马尔科夫模型<br>EM算法 （迭代计算）</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>machine_learning_website</title>
      <link href="/2019/03/31/machine-learning-website/"/>
      <url>/2019/03/31/machine-learning-website/</url>
      
        <content type="html"><![CDATA[<p>上机器学习课程时候，检索的网站，备注一下，以后需要学习<br><a href="https://blog.csdn.net/qq_33273962/article/details/83547342" target="_blank" rel="noopener">https://blog.csdn.net/qq_33273962/article/details/83547342</a></p><p><a href="https://www.cnblogs.com/baiting/p/6101981.html" target="_blank" rel="noopener">https://www.cnblogs.com/baiting/p/6101981.html</a></p><p><a href="https://m.leiphone.com/news/201902/biIqSBpehsaXFwpN.html?uniqueCode=OTEsp9649VqJfUcO" target="_blank" rel="noopener">https://m.leiphone.com/news/201902/biIqSBpehsaXFwpN.html?uniqueCode=OTEsp9649VqJfUcO</a></p><p><a href="https://blog.csdn.net/u014665013/article/details/78970184" target="_blank" rel="noopener">https://blog.csdn.net/u014665013/article/details/78970184</a></p><p><a href="https://m.baidu.com/from=1019471a/s?word=k+s+%E6%A3%80%E9%AA%8C++%E6%8B%9F%E5%90%88&amp;sa=bb&amp;ts=8918111&amp;t_kt=0&amp;ie=utf-8&amp;rsv_t=9789dDDxyBbDgg8gANiHbFLNiH9iyPv%252FBZ08a7iihLsR2SpKsNsS0G5sZ3o5A14&amp;rsv_pq=8183285748722183729&amp;ss=110&amp;tj=1&amp;rqlang=zh&amp;rsv_sug4=7460&amp;inputT=334&amp;oq=k%2Bs%2B%E6%A3%80%E9%AA%8C" target="_blank" rel="noopener">https://m.baidu.com/from=1019471a/s?word=k+s+检验++拟合&amp;sa=bb&amp;ts=8918111&amp;t_kt=0&amp;ie=utf-8&amp;rsv_t=9789dDDxyBbDgg8gANiHbFLNiH9iyPv%2FBZ08a7iihLsR2SpKsNsS0G5sZ3o5A14&amp;rsv_pq=8183285748722183729&amp;ss=110&amp;tj=1&amp;rqlang=zh&amp;rsv_sug4=7460&amp;inputT=334&amp;oq=k%2Bs%2B检验</a></p><p><a href="https://www.cnblogs.com/yunfeifei/p/4019504.html" target="_blank" rel="noopener">https://www.cnblogs.com/yunfeifei/p/4019504.html</a></p><p><a href="https://blog.csdn.net/qq_42686550/article/details/81514233" target="_blank" rel="noopener">https://blog.csdn.net/qq_42686550/article/details/81514233</a></p><p><a href="https://www.cnblogs.com/zackstang/p/8232921.html" target="_blank" rel="noopener">https://www.cnblogs.com/zackstang/p/8232921.html</a></p><p><a href="https://www.cnblogs.com/lianyingteng/p/7755545.html" target="_blank" rel="noopener">https://www.cnblogs.com/lianyingteng/p/7755545.html</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>log_read</title>
      <link href="/2019/03/29/log-read/"/>
      <url>/2019/03/29/log-read/</url>
      
        <content type="html"><![CDATA[<p>今天搭建对于kong log读取的系统，来源与师兄的经验，一些坑就可以避免了<br>这套系统由4部分组成</p><p>Logstash是一个开元数据收集引擎，具备实时管道功能；Logstash可以动态的将俩字不同来源的数据统一起来，并将数据标准化至你所选择的目的地。这里我们选择的Elasricearch</p><p>Elastricearch 是一个分布式可扩展的实时搜索的分析引擎，一个建立在全文搜索引擎Apache Lucene 基础上的搜索引擎，Elastricsearch 不仅包括全文搜索功能，还可以进行</p><ul><li>分布式实时文件存储，将每一个字段都编入索引，使之可以被搜索</li><li>实时分析的分布式搜索引擎</li><li>可以扩展到上百台服务器上，处理PB级别的结果或者非结构化数据</li></ul><p>FIleBeat  是一个日志文件托运工具，在服务器安装客户端后，FIlebeat可以监控日志目录或者指定的日志文件，追踪读取这些文件（追踪文件的变化，不停的读），并且转发这些信息到elasticsearch或者logstarsh中存放。</p><p>Metricbeat可以定期收集操作系统和服务器的运行指标（CPU，内存，硬盘，IO,读写速度，进程等等），Metricbeat可以将收集到的指标和数据发送到你指定的输出，比如：elasticsearch，最终达成监视服务器的目标。</p><p>Kibana是一个开源的分析和可视化平台，设计用于和Elasticsearch一起工作。你用Kibana来搜索，查看，并和存储在Elasticsearch索引中的数据进行交互。你可以轻松地执行高级数据分析，并且以各种图标、表格和地图的形式可视化数据。Kibana使得理解大量数据变得很容易。它简单的、基于浏览器的界面使你能够快速创建和共享动态仪表板，实时显示Elasticsearch查询的变化。</p><p>在安装的过程中，踩了一些坑，备注一下</p><p><font size="6">kong</font></p><p>Log format</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">log_format json_log escape=json &apos;&#123; &quot;@timestamp&quot;: &quot;$time_iso8601&quot;, &apos;  &apos;&quot;remote_addr&quot;: &quot;$remote_addr&quot;, &apos;  &apos;&quot;referer&quot;: &quot;$http_referer&quot;, &apos;  &apos;&quot;request&quot;: &quot;$request&quot;, &apos;  &apos;&quot;status&quot;: $status, &apos;  &apos;&quot;bytes&quot;:$body_bytes_sent, &apos;  &apos;&quot;agent&quot;: &quot;$http_user_agent&quot;, &apos;  &apos;&quot;user&quot;: &quot;$http_username&quot;, &apos; &apos;&quot;x_forwarded&quot;: &quot;$http_x_forwarded_for&quot;, &apos;  &apos;&quot;upstr_addr&quot;: &quot;$upstream_addr&quot;,&apos;  &apos;&quot;upstr_host&quot;: &quot;$upstream_http_host&quot;,&apos;  &apos;&quot;ups_resp_time&quot;: &quot;$upstream_response_time&quot; &#125;&apos;;</span><br><span class="line">access_log logs/access.log json_log;</span><br></pre></td></tr></table></figure><p>在配置logstash时，配置数据输入为json ；之后配置filebeat 时同样配置输入json格式数据，之后出现乱码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">syslog &#123;</span><br><span class="line">     type =&gt; &quot;logs&quot;</span><br><span class="line">     port =&gt; 9044</span><br><span class="line">       &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>之后出现乱码，例如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;message&quot; =&gt; &quot;%P\\u001A(%\\xBDi\\t\\x83,\\u001FϘ\\xF5H\\x8E$ofw\\x98\\x9F\\xDD\\xFB\\\&quot;&#123;f7\\x9B\\r%W\\u0003\\x9A\\xE3\\xA3\\xF3\\u&#123;7CBF2&#125;\\xDFnnn\\xBE\\xBB\\xB9\\xF9\\xFE\\xDF\\u0013\\xBC&gt;`P\\x9D\\n&quot;,</span><br></pre></td></tr></table></figure><p>错误提示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[0] &quot;_grokparsefailure_sysloginput&quot;,</span><br><span class="line">[1] &quot;_jsonparsefailure&quot;</span><br><span class="line">An unexpected error occurred! &#123;:error=&gt;#&lt;Errno::EBADF: Bad file descriptor - Bad file descriptor&gt;, :backtrace=&gt;[&quot;org/jruby/RubyIO.java:3565:in `each&apos;&quot;, &quot;/home/LAB/chengr/ELK/logstash-5.6.3/vendor/bundle/jruby/1.9/gems/logstash-input-syslog-3.2.2/lib/logstash/inputs/syslog.rb:182:in `tcp_receiver&apos;&quot;, &quot;/home/LAB/chengr/ELK/logstash-5.6.3/vendor/bundle/jruby/1.9/gems/logstash-input-syslog-3.2.2/lib/logstash/inputs/syslog.rb:167:in `tcp_listener&apos;&quot;]&#125;</span><br></pre></td></tr></table></figure><p>本来以为是因为 配置filebeat时，对于json输入的配置与logstash的配置出现冲突，以及 FIleBeat中encoding配置的问题，修改之后无效，查看错误时候发现 logstash输入类型和filebeat输出不一致，解析出错(<a href="https://blog.csdn.net/momoudong/article/details/82017852" target="_blank" rel="noopener">https://blog.csdn.net/momoudong/article/details/82017852</a>)<br>最终 logstash 配置 test.conf|filebeat_kong.conf</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">input&#123;</span><br><span class="line">   # file &#123;</span><br><span class="line">   #         path =&gt; &quot;/home/LAB/chengr/kong_log/file.log&quot;</span><br><span class="line">   #      &#125;</span><br><span class="line">   beats &#123;</span><br><span class="line">        type =&gt; &quot;nginx-log&quot; #&quot;logs&quot;</span><br><span class="line">        port =&gt; 9044</span><br><span class="line">          &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">filter&#123;</span><br><span class="line">    json&#123; #获取nginx log日志</span><br><span class="line">        source =&gt; &quot;message&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    mutate&#123;# 删去logstash转化后保留的messegae字段</span><br><span class="line">            remove_field =&gt; [&quot;message&quot;]</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">output&#123;</span><br><span class="line">    stdout &#123; codec =&gt; rubydebug &#125;</span><br><span class="line">    elasticsearch &#123;</span><br><span class="line">        hosts =&gt; [&quot;10.1.1.46:9200&quot;]</span><br><span class="line">        index =&gt; &quot;system-syslog-%&#123;+YYYY.MM&#125;&quot;</span><br><span class="line">        #document_type =&gt; &quot;logs&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>开启 logstash 命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ELK目录下</span><br><span class="line">ELK/logstash-5.6.3/bin/logstash -f /usr/local/ELK/logstash-5.6.3/config/test.conf(或filebeat_kong.conf)</span><br></pre></td></tr></table></figure><p>错误2：<br>更改完上一个错误后 发现报如下错误</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[2019-04-01T21:45:13,592][WARN ][logstash.outputs.elasticsearch] Could not index event to Elasticsearch. &#123;:status=&gt;400, :action=&gt;[&quot;index&quot;, &#123;:_id=&gt;nil, :_index=&gt;&quot;system-syslog-2019.04&quot;, :_type=&gt;&quot;log&quot;, :_routing=&gt;nil&#125;, 2019-04-01T13:45:00.925Z bd46 %&#123;message&#125;], :response=&gt;&#123;&quot;index&quot;=&gt;&#123;&quot;_index&quot;=&gt;&quot;system-syslog-2019.04&quot;, &quot;_type&quot;=&gt;&quot;log&quot;, &quot;_id&quot;=&gt;&quot;Cf0l2WkB8VUaRp2hlmvH&quot;, &quot;status&quot;=&gt;400, &quot;error&quot;=&gt;&#123;&quot;type&quot;=&gt;&quot;illegal_argument_exception&quot;, &quot;reason&quot;=&gt;&quot;Rejecting mapping update to [system-syslog-2019.04] as the final mapping would have more than 1 type: [log, logs]&quot;&#125;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><p>百度后有人是因logstash输出类型与elasticsearch 要求不同导致，即更改logstash输出类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">document_type =&gt; &quot;logs&quot;</span><br></pre></td></tr></table></figure><p>filebeat 配置filebeat.yml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">filebeat.prospectors:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- input_type: log</span><br><span class="line"> # encoding: UTF-8</span><br><span class="line">  paths:</span><br><span class="line">    - /home/LAB/chengr/kong_log/file.log</span><br><span class="line">  json.keys_under_root: true #在一次部署中发现这一行不能识别，最终注释之解决</span><br><span class="line">  #json.add_error_key: true</span><br><span class="line">  #json.message_key: log</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">output.logstash:</span><br><span class="line">  #The Logstash hosts</span><br><span class="line">  hosts: [&quot;10.1.1.46:9044&quot;]</span><br></pre></td></tr></table></figure><p>开启filebeat 命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ELK/filebeat-5.6.4-linux-x86_64/filebeat -path.config /usr/local/ELK/filebeat-5.6.4-linux-x86_64/</span><br></pre></td></tr></table></figure><p>elastcisearch 配置 config/elasticsearch.yml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cluster.name: my-es-cluster</span><br><span class="line">node.name: es-node-1</span><br><span class="line">path.data: /home/LAB/chengr/ELK/data/data-es</span><br><span class="line">path.logs: /home/LAB/chengr/ELK/log/log-es</span><br><span class="line">network.host: 10.1.1.46</span><br><span class="line">http.port: 9200</span><br></pre></td></tr></table></figure><p>开启 elastcisearch 命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ELK/elasticsearch-6.4.2/bin/elasticsearch</span><br></pre></td></tr></table></figure><p>kibana 配置 config/kibana.yml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">server.port: 5601</span><br><span class="line">elasticsearch.url: &quot;http://10.1.1.46:9200&quot;</span><br></pre></td></tr></table></figure><p>开启 kibana 命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ELK/kibana-6.4.2-linux-x86_64/bin/kibana</span><br></pre></td></tr></table></figure><p>10.1.1.45   10.1.1.46 两台服务器以及192.168.1.242 主机（可显示）搭配<br>filebeat 两台服务器 上各配置一个，指向在10.1.1.46 上的 logstash ，logstash指向10.1.1.46上的elasticsearch ，指向 192.168.1.242上的kibana</p><p>2019-5-8<br>部署在实际机器上时将配置中ip改为对应的IP</p><p>kibana 添加邮件预警</p><ul><li><a href="http://www.cnblogs.com/small-k/p/8551960.html" target="_blank" rel="noopener">http://www.cnblogs.com/small-k/p/8551960.html</a></li><li><a href="https://blog.51cto.com/10546390/2051676" target="_blank" rel="noopener">https://blog.51cto.com/10546390/2051676</a></li></ul><p>2019-5-19 Error</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">2019-05-19 16:46:00.000highemail html alarmwatcher_titleActionError: html email action : obligatory options in email: from and to </span><br><span class="line">&#123;</span><br><span class="line">  &quot;@timestamp&quot;: &quot;2019-05-19T08:46:00.031Z&quot;,</span><br><span class="line">  &quot;error&quot;: true,</span><br><span class="line">  &quot;report&quot;: false,</span><br><span class="line">  &quot;watcher&quot;: &quot;watcher_title&quot;,</span><br><span class="line">  &quot;action&quot;: &quot;email html alarm&quot;,</span><br><span class="line">  &quot;level&quot;: &quot;high&quot;,</span><br><span class="line">  &quot;message&quot;: &quot;ActionError: html email action : obligatory options in email: from and to&quot;,</span><br><span class="line">  &quot;type&quot;: &quot;sentinl-alarm&quot;,</span><br><span class="line">  &quot;_index&quot;: &quot;watcher_alarms-2019.05.19&quot;,</span><br><span class="line">  &quot;id&quot;: &quot;ClxEz2oBFTrgm4Wv5XBg&quot;</span><br><span class="line">#原因：这是由于在action 的Email属性中没有指明 to与 from 的邮箱</span><br></pre></td></tr></table></figure><p>配置kong日志格式更改  /etc/kong/kong.conf</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">nigin_http_log_format= log_json &apos;&#123; &quot;@timestamp&quot;: &quot;$time_iso8601&quot;, &apos;</span><br><span class="line">&apos;&quot;remote_addr&quot;: &quot;$remote_addr&quot;, &apos;</span><br><span class="line">&apos;&quot;referer&quot;: &quot;$http_referer&quot;, &apos;</span><br><span class="line">&apos;&quot;request&quot;: &quot;$request&quot;, &apos;</span><br><span class="line">&apos;&quot;status&quot;: $status, &apos;</span><br><span class="line">&apos;&quot;bytes&quot;:$body_bytes_sent, &apos;</span><br><span class="line">&apos;&quot;agent&quot;: &quot;$http_user_agent&quot;, &apos;</span><br><span class="line">&apos;&quot;x_forwarded&quot;: &quot;$http_x_forwarded_for&quot;, &apos;</span><br><span class="line">&apos;&quot;upstr_addr&quot;: &quot;$upstream_addr&quot;,&apos;</span><br><span class="line">&apos;&quot;upstr_host&quot;: &quot;$upstream_http_host&quot;,&apos;</span><br><span class="line">&apos;&quot;ups_resp_time&quot;: &quot;$upstream_response_time&quot; &#125;&apos;;</span><br><span class="line"></span><br><span class="line">nginx_proxy_access_log logs/access.log log_json;</span><br></pre></td></tr></table></figure><p>ps:<a href="https://docs.konghq.com/0.13.x/configuration/?_ga=2.242544130.102618566.1558236281-1173907870.1558236281#proxy_access_log" target="_blank" rel="noopener">kong 相关配置文件</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Kong</title>
      <link href="/2019/03/26/kong/"/>
      <url>/2019/03/26/kong/</url>
      
        <content type="html"><![CDATA[<h2><span id="kong">Kong</span></h2><p><a href="https://konghq.com/" target="_blank" rel="noopener">官网</a></p><h2><span id="相关概念">相关概念</span></h2><p>consumer</p><blockquote></blockquote><p>service</p><blockquote></blockquote><p>route</p><blockquote></blockquote><p>upstream</p><blockquote></blockquote><p>plugin</p><blockquote><p><a href="https://docs.konghq.com/hub/" target="_blank" rel="noopener">官网</a> 包含 官方插件以及第三方插件<br><a href="https://github.com/walkdeadtobe/my_kong_plugin" target="_blank" rel="noopener">个人自定义插件</a></p></blockquote><h2><span id="相关操作">相关操作</span></h2><p>创造 consumers</p><blockquote><p>curl -i -X POST  --url <a href="http://localhost:8001/consumers" target="_blank" rel="noopener">http://localhost:8001/consumers</a> --data “username=dzk”<br>给相应consumer 添加 basic-auth<br>curl -i -X POST  --url <a href="http://localhost:8001/consumers/e2dacbf6-117d-404f-8c40-58c305e4e669/basic-auth" target="_blank" rel="noopener">http://localhost:8001/consumers/e2dacbf6-117d-404f-8c40-58c305e4e669/basic-auth</a> --data “username=dzk” --data “password=dzk”<br>添加 ACL<br>curl -X POST <a href="http://localhost:8001/consumers/e2dacbf6-117d-404f-8c40-58c305e4e669/acls" target="_blank" rel="noopener">http://localhost:8001/consumers/e2dacbf6-117d-404f-8c40-58c305e4e669/acls</a> --data “group=group2”</p></blockquote><p>给相应服务添加 basic-auth ACL</p><blockquote><p>curl -X POST <a href="http://localhost:8001/services/ddj/plugins" target="_blank" rel="noopener">http://localhost:8001/services/ddj/plugins</a> --data “name=basic-auth” --data “config.hide_credentials=true”<br>curl -X POST <a href="http://localhost:8001/services/ddj/plugins" target="_blank" rel="noopener">http://localhost:8001/services/ddj/plugins</a> --data “name=acl” --data “config.whitelist=group1” --data “config.hide_groups_header=true”</p></blockquote><p>为kong添加 访问 admin 的外部服务</p><blockquote><p><a href="https://docs.gelato.io/guides/advanced-kong-integration" target="_blank" rel="noopener">https://docs.gelato.io/guides/advanced-kong-integration</a><br>curl -i -X POST  --url <a href="http://localhost:8001/services/" target="_blank" rel="noopener">http://localhost:8001/services/</a>  --data ‘name=admin’ --data ‘url=http://localhost:8001’<br>curl -i -X POST   --url <a href="http://localhost:8001/services/admin/routes" target="_blank" rel="noopener">http://localhost:8001/services/admin/routes</a>  --data ‘paths=/admin’ --data ‘strip_path=true’</p></blockquote><p>kong发送的信息不含用户consumer信息，使用datadog的log功能进行统计</p><p>datadog-agent 相关命令</p><blockquote><p>/etc/init.d/datadog-agent restart、stop<br>sudo datadog-agent check kong/status<br>systemctl start datadog-agent</p></blockquote><p>kong 数据库操作</p><blockquote><p>su - postgres<br>pslq<br>\c kong 切换数据库kong<br>select * from pg_tables 查看当前数据库所有的表</p></blockquote><p>更新 2019-4-18<br>给服务ACL 服务whitelist 添加 多个 group<br>出现问题，提交bug，kong开发大佬解决 ，附链接 <a href="https://github.com/Kong/kong/issues/4523" target="_blank" rel="noopener">https://github.com/Kong/kong/issues/4523</a><br>给插件 CORS 添加多个header<br>curl -X PATCH <a href="http://localhost:8001/plugins/8f407ede-33d2-43c3-b528-cb1f8a4ebec1" target="_blank" rel="noopener">http://localhost:8001/plugins/8f407ede-33d2-43c3-b528-cb1f8a4ebec1</a> <br>–data “config.headers=Origin” <br>–data “config.headers=X-Requested-With” <br>–data “config.headers=Content-Type” <br>–data “config.headers=Authorization” <br>–data “config.headers=Accept” <br>–data “config.headers=Accept-Version” <br>–data “config.headers=Content-Length” <br>–data “config.headers=Content-MD5” <br>–data “config.headers=Date” <br>–data “config.headers=X-Auth-Token”</p><p>更新 2019-6-22<br>在查询kong的服务数目时，发现postgresql数据库的services数目与 curl <a href="http://localhost:8001/services" target="_blank" rel="noopener">http://localhost:8001/services</a> 数目不同，最后在github源码中发现 在api中设置最大返回值为100;唔在考虑从源码编译修改，但是安装会很蛋疼</p><h2><span id="插件使用">插件使用</span></h2><p>kong_datadog_agent</p><blockquote><p>更爱配置文件后出现</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2019/03/27 22:48:13 config.load While parsing config: yaml: line 291: did not find expected key</span><br><span class="line">Cannot setup config, exiting: unable to load Datadog config file: While parsing config: yaml: line 291: did not find expected key</span><br><span class="line">Error: unable to load Datadog config file: While parsing config: yaml: line 291: did not find expected key</span><br></pre></td></tr></table></figure><blockquote><p>最终发现是因为 更改配置时，没有对齐行开始（坑爹）</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> kong plugin consumer service route </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bp+rbf+lstm</title>
      <link href="/2019/03/23/bp-rbf-lstm/"/>
      <url>/2019/03/23/bp-rbf-lstm/</url>
      
        <content type="html"><![CDATA[<p>fisher +感知器  属于   线性分类器</p><p>人工神经网络（DP）  对比    径向基函数（RBF：神经元不只是感知器）<br>LSTM<br>模式识别 思考题 5000男+5000女 特征 分类</p>]]></content>
      
      
      
        <tags>
            
            <tag> deep learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ABAC</title>
      <link href="/2019/03/20/ABAC/"/>
      <url>/2019/03/20/ABAC/</url>
      
        <content type="html"><![CDATA[<p>ABAC:Attribute Based Access Control<br>abaC 介绍视频： <a href="https://www.youtube.com/watch?v=cgTa7YnGfHA" target="_blank" rel="noopener">https://www.youtube.com/watch?v=cgTa7YnGfHA</a><br>+<br><a href="https://www.youtube.com/watch?v=gskKUIa0_6A" target="_blank" rel="noopener">https://www.youtube.com/watch?v=gskKUIa0_6A</a><br>An Attribute Based Access Control Model for RESTful Service：一篇相关论文，其视频：<a href="https://www.youtube.com/watch?v=hDlr66-4paI" target="_blank" rel="noopener">https://www.youtube.com/watch?v=hDlr66-4paI</a></p><p>相关概念延伸：XACML</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>多元正态分布密度</title>
      <link href="/2019/03/18/Multivariate-normal-distribution-density/"/>
      <url>/2019/03/18/Multivariate-normal-distribution-density/</url>
      
        <content type="html"><![CDATA[<p>公式推到 建议 word<br><a href="https://blog.csdn.net/qq_23869697/article/details/80610361" target="_blank" rel="noopener">https://blog.csdn.net/qq_23869697/article/details/80610361</a><br><a href="https://baike.baidu.com/item/%E5%8D%8F%E6%96%B9%E5%B7%AE%E7%9F%A9%E9%98%B5/9822183?fr=aladdin" target="_blank" rel="noopener">https://baike.baidu.com/item/协方差矩阵/9822183?fr=aladdin</a></p><p>$$ \varphi ([u_{1},u_{2}…,u_{d}]^{T})\begin{cases}<br>&amp; \text{1       if } \left | u_{j} \right |\leq \frac{1}{2} \space , \space j=1,2,…,d \<br>&amp; \text{0       esle }<br>\end{cases} $$</p><p>$$ x\in R^{d} $$</p><p>$$ V=h^{d} $$</p>]]></content>
      
      
      
        <tags>
            
            <tag> 模式识别 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>素数问题：艾拉欧拉筛法</title>
      <link href="/2019/03/18/%E7%B4%A0%E6%95%B0%E9%97%AE%E9%A2%98%EF%BC%9A%E8%89%BE%E6%8B%89%E6%AC%A7%E6%8B%89%E7%AD%9B%E6%B3%95/"/>
      <url>/2019/03/18/%E7%B4%A0%E6%95%B0%E9%97%AE%E9%A2%98%EF%BC%9A%E8%89%BE%E6%8B%89%E6%AC%A7%E6%8B%89%E7%AD%9B%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>参考博客</p><p><a href="https://blog.csdn.net/hzaukotete/article/details/81103528" target="_blank" rel="noopener">https://blog.csdn.net/hzaukotete/article/details/81103528</a></p><p><a href="https://blog.csdn.net/qq_39763472/article/details/82428602" target="_blank" rel="noopener">https://blog.csdn.net/qq_39763472/article/details/82428602</a></p><p>$$  J_\alpha(x) = \sum_{m=0}^\infty \frac{(-1)^m}{m! \Gamma (m + \alpha + 1)} {\left({ \frac{x}{2} }\right)}^{2m + \alpha} \text {，行内公式示例}  $$<br>$ \ \ \ $<br>$$ \int_{0}^{1}{\frac{\pi}{2}}\sin(x)\space dx $$<br>$$ \int_{0}^{} $$<br>$$ \space{12pt}  $$</p>]]></content>
      
      
      
        <tags>
            
            <tag> algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>microservice-about-resource</title>
      <link href="/2019/03/14/microservice-about-resource/"/>
      <url>/2019/03/14/microservice-about-resource/</url>
      
        <content type="html"><![CDATA[<p>Ouath 2.0 授权协议 相关 <a href="http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html</a>   + <a href="https://www.cnblogs.com/flashsun/p/7424071.html" target="_blank" rel="noopener">https://www.cnblogs.com/flashsun/p/7424071.html</a></p><p>MOngodb 数据库操作<br><a href="http://www.runoob.com/mongodb/mongodb-analyzing-queries.html" target="_blank" rel="noopener">http://www.runoob.com/mongodb/mongodb-analyzing-queries.html</a><br>+<br><a href="https://docs.spring.io/spring-data/mongodb/docs/current/reference/html/#mongodb-connectors" target="_blank" rel="noopener">https://docs.spring.io/spring-data/mongodb/docs/current/reference/html/#mongodb-connectors</a></p><p>API 网关测试<br><a href="https://www.lijiaocn.com/%E9%A1%B9%E7%9B%AE/2018/11/08/kong-features-06-production-and-benchmark.html#%E4%BB%8E%E8%AF%B7%E6%B1%82%E7%AB%AF%E7%9B%B4%E6%8E%A5%E8%AE%BF%E9%97%AEpod" target="_blank" rel="noopener">https://www.lijiaocn.com/项目/2018/11/08/kong-features-06-production-and-benchmark.html#从请求端直接访问pod</a><br>+<br><a href="https://www.codercto.com/a/48944.html" target="_blank" rel="noopener">https://www.codercto.com/a/48944.html</a></p><p>微服务授权（服务注册与发现等） 以及系列化 博客<br><a href="https://segmentfault.com/a/1190000007689560" target="_blank" rel="noopener">https://segmentfault.com/a/1190000007689560</a><br>+<br><a href="https://www.cnblogs.com/bluedoctor/p/8967951.html" target="_blank" rel="noopener">https://www.cnblogs.com/bluedoctor/p/8967951.html</a><br>+<br><a href="http://emacoo.cn/arch/microservice-overview/" target="_blank" rel="noopener">http://emacoo.cn/arch/microservice-overview/</a></p><p>单点登录<br><a href="https://yq.aliyun.com/articles/636281" target="_blank" rel="noopener">https://yq.aliyun.com/articles/636281</a></p><p>kong网关<br><a href="http://www.blogjava.net/coolfiry/archive/2018/01/05/433005.html" target="_blank" rel="noopener">http://www.blogjava.net/coolfiry/archive/2018/01/05/433005.html</a></p><p>$$ \int_{0}^{1}{\frac{\pi}{2}}\sin(x)\space dx $$</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>KNN</title>
      <link href="/2019/03/14/KNN/"/>
      <url>/2019/03/14/KNN/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">def knearestEstimate(sampleSet,k):</span><br><span class="line">    &apos;&apos;&apos;</span><br><span class="line">    K近邻非参数估计方法</span><br><span class="line">    Args:</span><br><span class="line">        sampleSet:样本向量的集合</span><br><span class="line">        k:用于计算近邻数Kn的常数</span><br><span class="line">    Returns:</span><br><span class="line">        估计的概率密度函数</span><br><span class="line">    &apos;&apos;&apos;</span><br><span class="line">    n,d=np.shape(sampleset)</span><br><span class="line">    m=(k*n**0.5)</span><br><span class="line">    def probability(sample):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        K近邻非参数估计得到的概率密度函数</span><br><span class="line">        Args:</span><br><span class="line">            sampleSet:概率密度待估计的样本向量</span><br><span class="line">        Returns:</span><br><span class="line">            估计的概率密度</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        dist=[]</span><br><span class="line">        for p in sampleSet-sample:</span><br><span class="line">            dist.append((np.sum(p**2))**0.5)</span><br><span class="line">        np.sort(np.array(dist))</span><br><span class="line">        r=dist[int(m)]</span><br><span class="line">        v=math.pi**(d/2)*r**d/math.gamma(d/2+1)</span><br><span class="line">        return m/n/v</span><br><span class="line">    return probability</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.sum(p**2))**0.5</span><br></pre></td></tr></table></figure><p>即  $$ \sqrt{(x_{1}-y_{1})^2+(x_{2}-y_{2})^2} $$</p><p>n纬球体的体积公式为(<a href="https://spaces.ac.cn/archives/3154" target="_blank" rel="noopener">https://spaces.ac.cn/archives/3154</a>) $$ V_{n}®= \frac{2\pi^{\frac{n}{2}}}{ \Gamma (\frac{n}{2})}r^{n-1} $$</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>service discovery and register</title>
      <link href="/2019/03/13/service-discovery-and-register/"/>
      <url>/2019/03/13/service-discovery-and-register/</url>
      
        <content type="html"><![CDATA[<p><a href="https://mp.weixin.qq.com/s/uzGF5b4sn1DeSc1F1FOGRA" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/uzGF5b4sn1DeSc1F1FOGRA</a></p><p>微信 上关于微服务发现的推文<br>服务发现背后的基本思想是对于服务的每一个新实例（或应用程序），能够识别当前环境和存储相关信息。存储的注册表信息本身通常采用键/值对的格式，由于服务发现经常用于分布式系统，所以要求这些信息可伸缩、支持容错和分布式集群中的所有节点</p><p>做到服务发现之前首先需要做到的是提供服务注册表，供服务消毒费查询<br>同时注册表应当保持高可用，大多以键值对的形式存在</p><p>Zookeeper</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>openresty_source_compile</title>
      <link href="/2019/03/08/openresty-source-compile/"/>
      <url>/2019/03/08/openresty-source-compile/</url>
      
        <content type="html"><![CDATA[<p>最近调研APIGateway，目前主要在研究 kong 的东西，打算在服务器上布置环境，测试其性能<br>系统环境：<br>操作系统版本：Linux version 4.4.0-134-generic (buildd@lgw01-amd64-033) (gcc version 5.4.0 20160609 (Ubuntu 5.4.0-6ubuntu1~16.04.10) )</p><p>用户目录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">×××@bd45:~$ tree -L 1  </span><br><span class="line">.  </span><br><span class="line">|-- apr  </span><br><span class="line">|-- apr-1.4.5  </span><br><span class="line">|-- apr-1.4.5.tar.gz  </span><br><span class="line">|-- apr-util  </span><br><span class="line">|-- apr-util-1.3.12  </span><br><span class="line">|-- apr-util-1.3.12.tar.gz  </span><br><span class="line">|-- download_file?file_path=dists%2Fkong-community-edition-1.0.3.xenial.all.deb </span><br><span class="line">|-- httpd  </span><br><span class="line">|-- httpd-2.4.38  </span><br><span class="line">|-- httpd-2.4.38.tar.gz  </span><br><span class="line">|-- kong  </span><br><span class="line">|-- kong_source  </span><br><span class="line">|-- lua-5.3.4  </span><br><span class="line">|-- lua-5.3.4.tar.gz  </span><br><span class="line">|-- luarocks  </span><br><span class="line">|-- nginx  </span><br><span class="line">|-- nginx-1.15.9  </span><br><span class="line">|-- nginx-1.15.9.tar.gz  </span><br><span class="line">|-- openresty  </span><br><span class="line">|-- openresty-1.13.6.2  </span><br><span class="line">|-- openresty-1.13.6.2.tar.gz</span><br><span class="line">|-- openssl</span><br><span class="line">|-- openssl-1.0.2r</span><br><span class="line">|-- openssl-1.0.2r.tar.gz</span><br><span class="line">|-- pcre</span><br><span class="line">|-- pcre-8.43</span><br><span class="line">|-- pcre-8.43.tar.gz</span><br><span class="line">|-- postgresql</span><br><span class="line">|-- postgresql-11.2</span><br><span class="line">|-- postgresql-11.2.tar.gz</span><br><span class="line">|-- siege</span><br><span class="line">|-- siege-4.0.4</span><br><span class="line">`-- siege-4.0.4.tar.gz</span><br></pre></td></tr></table></figure><p>安装pcre</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -# -O  https://ftp.pcre.org/pub/pcre/pcre-8.43.tar.gz</span><br><span class="line">./configure --prefix=/home/LAB/chengr/pcre </span><br><span class="line">./configure --prefix=/home/LAB/chengr/nginx --with-pcre=/home/LAB/chengr/pcre-8.43</span><br></pre></td></tr></table></figure><p>安装zlib</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget http://prdownloads.sourceforge.net/libpng/zlib-1.2.11.tar.gz</span><br><span class="line"> ./configure  --prefix=/home/LAB/chengr/zlib</span><br><span class="line"> make &amp;&amp; make check &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>安装 nginx，官网配置说明 ：<a href="https://nginx.org/en/docs/configure.html" target="_blank" rel="noopener">https://nginx.org/en/docs/configure.html</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">curl -# -O http://nginx.org/download/nginx-1.15.8.tar.gz</span><br><span class="line">tar -zvxf nginx-1.15.8.tar.gz</span><br><span class="line">cd nginx-1.15.8</span><br><span class="line">(./configure: error: the HTTP rewrite module requires the PCRE library.)</span><br><span class="line">(./configure: error: the HTTP magzip module requires the zlib library.)</span><br><span class="line">与nginx模块一起编译，要求指定源码目录</span><br><span class="line">./configure --prefix=/home/LAB/chengr/nginx  --with-pcre=/home/LAB/chengr/pcre-8.39  --with-zlib=/home/LAB/chengr/zlib-1.2.11</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>下载openssl(配置openresty)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl -# -O https://www.openssl.org/source/openssl-1.0.2r.tar.gz(https://www.openssl.org/source/)</span><br><span class="line">tar -zvxf openssl-1.0.2r.tar.gz</span><br><span class="line">./config --prefix=/home/LAB/chengr/openssl  -fPIC no-gost no-shared no-zlib</span><br><span class="line">make depend</span><br></pre></td></tr></table></figure><p>安装luarock:<br>按照教程来 <a href="https://github.com/luarocks/luarocks/wiki/Installation-instructions-for-Unix" target="_blank" rel="noopener">https://github.com/luarocks/luarocks/wiki/Installation-instructions-for-Unix</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">（其中configure 改为./configure    --prefix=/home/LAB/chengr/luarocks   --lua-suffix=jit    --with-lua=/home/LAB/chengr/openresty/luajit    --with-lua-include=/home/LAB/chengr/openresty/luajit/include/luajit-2.1）</span><br><span class="line">make</span><br><span class="line">  make install</span><br><span class="line">  make bootstrap</span><br></pre></td></tr></table></figure><p>安装 openresty 官网教程：<a href="https://openresty.org/cn/installation.html" target="_blank" rel="noopener">https://openresty.org/cn/installation.html</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">curl -# -O https://openresty.org/download/openresty-1.13.6.2.tar.gz  </span><br><span class="line">tar -xzvf openresty-1.13.6.2.tar.gz  </span><br><span class="line">cd cd openresty-1.13.6.2  </span><br><span class="line">mkdir openresty  </span><br><span class="line">./configure --prefix=/home/LAB/chengr/openresty  --with-luajit --with-stream   --with-http_iconv_module --with-http_realip_module   --with-ld-opt=&quot;-Wl,-rpath,/usr/local/lib&quot;  --with-http_stub_status_module   --with-http_ssl_module --with-http_sub_module  </span><br><span class="line">//按照kong官网要求加上如下配置  </span><br><span class="line">   --with-pcre-jit </span><br><span class="line">   --with-http_ssl_module </span><br><span class="line">   --with-http_realip_module </span><br><span class="line">   --with-http_stub_status_module </span><br><span class="line">   --with-http_v2_module   </span><br><span class="line">   --with-openssl=/home/LAB/chengr/openssl-1.0.2r</span><br><span class="line"></span><br><span class="line">make   </span><br><span class="line">sudo make install</span><br><span class="line">【】</span><br></pre></td></tr></table></figure><p>安装postgresql （官网教程：<a href="https://www.postgresql.org/docs/current/install-procedure.html%EF%BC%89" target="_blank" rel="noopener">https://www.postgresql.org/docs/current/install-procedure.html）</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -# -O https://ftp.postgresql.org/pub/source/v11.2/postgresql-11.2.tar.gz</span><br></pre></td></tr></table></figure><p>按安装性能测试工具：siege ab</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">curl -# -O http://download.joedog.org/siege/siege-4.0.4.tar.gz</span><br><span class="line">tar -zvxf siege-4.0.4.tar.gz   </span><br><span class="line">cd siege-4.0.4</span><br><span class="line">./configure --prefix=/home/LAB/chengr/siege  </span><br><span class="line">make     </span><br><span class="line">sudo make install   </span><br><span class="line"> siege/bin/siege –help</span><br></pre></td></tr></table></figure><hr><p>ab（需要提前安装 apr 、apr-util、pcre、openssl）<br>apr</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget http://archive.apache.org/dist/apr/apr-1.4.5.tar.gz</span><br><span class="line">tar -zxf apr-1.4.5.tar.gz  </span><br><span class="line">cd  apr-1.4.5  </span><br><span class="line">./configure --prefix=/home/LAB/chengr/apr  </span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>apr-util</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget http://archive.apache.org/dist/apr/apr-util-1.3.12.tar.gz</span><br><span class="line">tar -zxf apr-util-1.3.12.tar.gz</span><br><span class="line">cd apr-util-1.3.12</span><br><span class="line">./configure --prefix=/home/LAB/chengr/apr-util --with-apr=/home/LAB/chengr/apr/</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>pcre</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget http://jaist.dl.sourceforge.net/project/pcre/pcre/8.39/pcre-8.39.tar.gz</span><br><span class="line">tar -zxf pcre-8.39.tar.gz</span><br><span class="line">cd pcre-8.10</span><br><span class="line">./configure --prefix=/home/LAB/chengr/pcre</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>最终安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd httpd-2.4.38</span><br><span class="line">./configure --prefix=/home/LAB/chengr/httpd --with-apr=/home/LAB/chengr/apr --with-apr-util=/home/LAB/chengr/apr-util --with-pcre=/home/LAB/chengr/pcre --enable-ssl --with-ssl=/home/LAB/chengr/openssl</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>curl -# -O <a href="https://www-us.apache.org/dist//httpd/httpd-2.4.38.tar.gz" target="_blank" rel="noopener">https://www-us.apache.org/dist//httpd/httpd-2.4.38.tar.gz</a></p><p>按照教程安装 <a href="https://www.cnblogs.com/chevin/p/10222681.html" target="_blank" rel="noopener">https://www.cnblogs.com/chevin/p/10222681.html</a></p><p>（下载 httpd wget <a href="https://www.apache.org/dist/httpd/httpd-2.4.38.tar.gz" target="_blank" rel="noopener">https://www.apache.org/dist/httpd/httpd-2.4.38.tar.gz</a> ）</p><p>./config --prefix=/home/LAB/chengr/openssl  -fPIC no-gost no-shared no-zlib<br>make depend<br>解决：<a href="http://www.bubuko.com/infodetail-621556.html" target="_blank" rel="noopener">http://www.bubuko.com/infodetail-621556.html</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">chengr@bd46:~$ tree -L 2 -d</span><br><span class="line">.</span><br><span class="line">|-- apr</span><br><span class="line">|   |-- bin</span><br><span class="line">|   `-- lib</span><br><span class="line"></span><br><span class="line">|-- apr-util</span><br><span class="line">|   |-- bin</span><br><span class="line">|   `-- lib</span><br><span class="line">|-- httpd</span><br><span class="line">|   |-- bin</span><br><span class="line">|   |-- build</span><br><span class="line">|   |-- cgi-bin</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">|-- openssl</span><br><span class="line">|   |-- bin</span><br><span class="line">|   |-- lib</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">|   `-- VMS</span><br><span class="line">|-- pcre</span><br><span class="line">|   |-- bin</span><br><span class="line">|   |-- lib</span><br><span class="line"></span><br><span class="line">|-- siege</span><br><span class="line">|   |-- bin</span><br></pre></td></tr></table></figure><p>添加到环境变量中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">#add for apr 2019-3-10</span><br><span class="line">export APR_HOME=/home/LAB/chengr/apr</span><br><span class="line">export PATH=$PATH:$APR_HOME/bin</span><br><span class="line">#export LIB_PATH+=$APR_HOME/lib</span><br><span class="line">#end</span><br><span class="line"></span><br><span class="line">#add for apr-util 2019-3-10</span><br><span class="line">export APRUTIL_HOME=/home/LAB/chengr/apr-util</span><br><span class="line">export PATH=$PATH:$APRUTIL_HOME/bin</span><br><span class="line">#export LIB_PATH+=$APRUTIL_HOME/lib</span><br><span class="line">#end</span><br><span class="line"></span><br><span class="line">#add for httpd 2019-3-10</span><br><span class="line">export HTTPD_HOME=/home/LAB/chengr/httpd</span><br><span class="line">export PATH=$PATH:$HTTPD_HOME/bin</span><br><span class="line">#export LIB_PATH+=$HTTPD_HOME/lib</span><br><span class="line">#end</span><br><span class="line"></span><br><span class="line">#add for openssl 2019-3-10</span><br><span class="line">export OPENSSL_HOME=/home/LAB/chengr/openssl</span><br><span class="line">export PATH=$PATH:$OPENSSL_HOME/bin</span><br><span class="line">#export LIB_PATH+=$OPENSSL_HOME/lib</span><br><span class="line">#end</span><br><span class="line"></span><br><span class="line">#add for pcre 2019-3-10</span><br><span class="line">export PCRE_HOME=/home/LAB/chengr/pcre</span><br><span class="line">export PATH=$PATH:$PCRE_HOME/bin</span><br><span class="line">#export LIB_PATH+=$HTTPD_HOME/lib</span><br><span class="line">#end</span><br><span class="line"></span><br><span class="line">#add for siege 2019-3-10</span><br><span class="line">export SIEGE_HOME=/home/LAB/chengr/siege</span><br><span class="line">export PATH=$PATH:$SIEGE_HOME/bin</span><br><span class="line">#end</span><br><span class="line"></span><br><span class="line">#add for luarocks 2019-3-10</span><br><span class="line">export LUAROCKS_HOME=/home/LAB/chengr/luarocks</span><br><span class="line">export PATH=$PATH:$LUAROCKS_HOME/bin</span><br><span class="line">#export LIB_PATH+=$LUAROCKS_HOME/lib</span><br><span class="line">#end</span><br><span class="line"></span><br><span class="line">#add for nginx 2019-3-10</span><br><span class="line">export NGINX_HOME=/home/LAB/chengr/nginx</span><br><span class="line">export PATH=$PATH:$NGINX_HOME/sbin</span><br><span class="line">#end</span><br><span class="line"></span><br><span class="line">#add for openresty 2019-3-10</span><br><span class="line">export OPENRESTY_HOME=/home/LAB/chengr/openresty</span><br><span class="line">export PATH=$PATH:$OPENRESTY_HOME/bin</span><br><span class="line">#export LIB_PATH+=$OPENRESTY_HOME/lib</span><br><span class="line">#end</span><br><span class="line"></span><br><span class="line">#add for postgresql 2019-3-10</span><br><span class="line">export POSTGRESQL_HOME=/home/LAB/chengr/postgresql</span><br><span class="line">export PATH=$PATH:$POSTGRESQL_HOME/bin</span><br><span class="line">#export LIB_PATH+=$POSTGRESQL_HOME/lib</span><br><span class="line">#end</span><br></pre></td></tr></table></figure><p>jhipster<br><a href="https://blog.csdn.net/zhao50632/article/details/54582177" target="_blank" rel="noopener">https://blog.csdn.net/zhao50632/article/details/54582177</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>nginx+mongodb</title>
      <link href="/2019/03/06/nginx-mongodb/"/>
      <url>/2019/03/06/nginx-mongodb/</url>
      
        <content type="html"><![CDATA[<br>  install luarock:https://blog.csdn.net/kgzhang/article/details/72885199  <br>  install lua_nginx_moudle https://www.cnblogs.com/uglyliu/p/8534473.html<br>install nginx-gridfx https://blog.csdn.net/jameshadoop/article/details/52665342  + https://blog.csdn.net/caiwenfeng_for_23/article/details/44230513 +https://github.com/mdirolf/nginx-gridfs<p>./configure --user=nginx --group=nginx --prefix=/usr/local/nginx  --with-http_realip_module --with-http_stub_status_module --with-http_ssl_module --with-http_flv_module --with-http_gzip_static_module --with-cc-opt=-Wno-error --with-stream --add-module=/opt/nginx_module/ngx_devel_kit --add-module=/opt/nginx_module/lua-nginx-module --add-module=/opt/nginx_module/nginx-gridfs</p><p>./configure --user=nginx --group=nginx --prefix=/usr/local/nginx --with-cc-opt=-Wno-error --add-module=/opt/nginx_module/ngx_devel_kit --add-module=/opt/nginx_module/lua-nginx-module --add-module=/opt/nginx_module/nginx-gridfs</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>API_Key</title>
      <link href="/2019/03/06/API-Key/"/>
      <url>/2019/03/06/API-Key/</url>
      
        <content type="html"><![CDATA[<h2><span id="how-kong-generate-api-key-in-plugin-key-auth">How Kong  generate api key in plugin key-auth</span></h2><p>在 github <a href="https://github.com/Kong/kong" target="_blank" rel="noopener">https://github.com/Kong/kong</a> ，我们可以看到关于Kong的代码<br>在https://github.com/eyolas/kong-plugin-key-auth-referer/blob/master/kong/plugins/key-auth-referer/daos.lua 上，我们可以看到其中包含代码<br><code>local utils = require &quot;kong.tools.utils&quot;</code><br><code> key = {type = &quot;string&quot;, required = false, unique = true, default = utils.random_string}</code><br>按照目录搜索<code>https://github.com/Kong/kong/blob/master/kong/tools/utils.lua</code>，从中可以查询到函数<code>random_string</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">local function random_string()</span><br><span class="line">    -- get 24 bytes, which will return a 32 char string after encoding</span><br><span class="line">    -- this is done in attempt to maintain backwards compatibility as</span><br><span class="line">    -- much as possible while improving the strength of this function</span><br><span class="line">    return encode_base64(get_rand_bytes(24, true))</span><br><span class="line">           :gsub(&quot;/&quot;, char(rand(48, 57)))  -- 0 - 10</span><br><span class="line">           :gsub(&quot;+&quot;, char(rand(65, 90)))  -- A - Z</span><br><span class="line">           :gsub(&quot;=&quot;, char(rand(97, 122))) -- a - z</span><br><span class="line">  end</span><br></pre></td></tr></table></figure><p>由此可知，当使用key-auth插件，但不指明key值时，就会默认自动生成 24位字符，对于产生的特殊字符进行替换</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
